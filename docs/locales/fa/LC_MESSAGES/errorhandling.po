# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-16 00:38+0430\n"
"POT-Creation-Date: 2021-12-08 08:56+0330\n"
"PO-Revision-Date: 2022-05-24 16:02+0430\n"
"Last-Translator: Komeil Parseh <ahmdparsh129@gmail.com>\n"
"Language-Team: fa <ahmdparsh129@gmail.com>\n"
"Language: fa\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../errorhandling.rst:2
msgid "Handling Application Errors"
msgstr "مدیریت خطا های برنامه"

#: ../../errorhandling.rst:4
#, python-format
msgid ""
"Applications fail, servers fail. Sooner or later you will see an exception in production. Even "
"if your code is 100% correct, you will still see exceptions from time to time. Why? Because "
"everything else involved will fail. Here are some situations where perfectly fine code can lead "
"to server errors:"
msgstr ""
"برنامه ها کار نمیکنند، سرور ها از کار می‌افتند. دیر یا زود شاهد یک استثنا در ارائه محصول خواهید "
"بود. حتی اگر کد شما ۱۰۰% درست باشد هم گاهی استثنا ها را خواهید دید. چرا؟ چون هر چیزی که پیچیده "
"است شکست خواهد خورد. در اینجا مواردی وجود دارد که حتی با وجود کد های کاملا دقیق، میتواند منجر "
"به خطا های سرور شود:"

#: ../../errorhandling.rst:10
msgid ""
"the client terminated the request early and the application was still reading from the incoming "
"data"
msgstr "کلاینت درخواست را زودتر قطع کرد اما برنامه همچنان در حال خواندن داده های دریافتی بود"

#: ../../errorhandling.rst:12
msgid "the database server was overloaded and could not handle the query"
msgstr "سرور دیتا‌بیس اضافه بار داشت و نتواند کوئری ها را مدیریت کند"

#: ../../errorhandling.rst:13
msgid "a filesystem is full"
msgstr "یک فایل سیستم پر باشد"

#: ../../errorhandling.rst:14
msgid "a harddrive crashed"
msgstr "یک هارد‌ درایو خراب شود"

#: ../../errorhandling.rst:15
msgid "a backend server overloaded"
msgstr "به سرور بک‌اند اضافه بار وارد شود"

#: ../../errorhandling.rst:16
msgid "a programming error in a library you are using"
msgstr "یک ارور در کتابخانه ای که استفاده میکنید رخ دهد"

#: ../../errorhandling.rst:17
msgid "network connection of the server to another system failed"
msgstr "اتصال شبکه سرور به سیستم دیگری انجام نگرفت"

#: ../../errorhandling.rst:19
msgid ""
"And that's just a small sample of issues you could be facing. So how do we deal with that sort "
"of problem? By default if your application runs in production mode, and an exception is raised "
"Flask will display a very simple page for you and log the exception to the :attr:`~flask.Flask."
"logger`."
msgstr ""
"و این ها فقط چند نمونه کوچک از مشکلاتی است که ممکن است با آن روبرو شوید. پس چگونه با این نوع "
"مشکلات برخورد کنیم؟ به صورت پیشفرض، اگر برنامه در حالت ارائه اجرا شود و یک استثنا مطرح شود، "
"فلاسک صفحه بسیار ساده ای را براری شما نمایش می‌دهد و استثنا را در :attr:`~flask.Flask.logger` "
"ثبت می‌کند."

#: ../../errorhandling.rst:24
msgid ""
"But there is more you can do, and we will cover some better setups to deal with errors "
"including custom exceptions and 3rd party tools."
msgstr ""
"ولی میتوانید کار های بیشتری انجام دهید. ما تنظیمات بهتری را برای مقابله با خطا ها از جمله "
"استثنا های سفارشی و ابزار های شخص ثالث پوشش خواهیم داد."

#: ../../errorhandling.rst:31
msgid "Error Logging Tools"
msgstr "ابزار های واقعه‌نگاری ارور ها"

#: ../../errorhandling.rst:33
msgid ""
"Sending error mails, even if just for critical ones, can become overwhelming if enough users "
"are hitting the error and log files are typically never looked at. This is why we recommend "
"using `Sentry <https://sentry.io/>`_ for dealing with application errors. It's available as a "
"source-available project `on GitHub <https://github.com/getsentry/sentry>`_ and is also "
"available as a `hosted version <https://sentry.io/signup/>`_ which you can try for free. Sentry "
"aggregates duplicate errors, captures the full stack trace and local variables for debugging, "
"and sends you mails based on new errors or frequency thresholds."
msgstr ""
"ارسال ایمیل های حاوی خطا، حتی اگر فقط برای ایمیل های مهم باشد، در صورتی که کاربران کافی به خطا "
"برخورد کنند و فایل های گزارش نیز هرگز تا الان بررسی نشده باشند، میتواند طاقت‌فرسا شود. به همین "
"دلیل است که توصیه میکنیم از `Sentry <https://sentry.io/>`_ برای مقابله با خطا های برنامه "
"استفاده کنید. این به عنوان یک پروژه به صورت متن باز در `گیت‌هاب <https://github.com/getsentry/"
"sentry>`_ در دسترس است و همچنین میتوانید یک `نسخه برای میزبانی <https://sentry.io/signup/>`_ را "
"به صورت رایگان امتحان کنید. Sentry خطا های تکراری را جمع آوری می‌کند، ردیابی پشته های کامل و "
"متغیر های محلی را برای اشکال زدایی ضبط می‌کند و بر اساس خطا های جدید یا آستانه تکرار، ایمیل هایی "
"را برای شما ارسال می‌کند."

#: ../../errorhandling.rst:44
msgid ""
"To use Sentry you need to install the ``sentry-sdk`` client with extra ``flask`` dependencies."
msgstr "برای استفاده از Sentry باید کلاینت ``sentry-sdk`` را با وابستگی اضافی ``flask`` نصب کنید."

#: ../../errorhandling.rst:51
msgid "And then add this to your Flask app:"
msgstr "و سپس این را به برنامه فلاسک خود اضافه کنید:"

#: ../../errorhandling.rst:60
msgid ""
"The ``YOUR_DSN_HERE`` value needs to be replaced with the DSN value you get from your Sentry "
"installation."
msgstr "``YOUR_DSN_HERE`` باید با مقدار DSN ای که از نصب Sentry دریافت می‌کنید، جایگزین شود."

#: ../../errorhandling.rst:63
msgid ""
"After installation, failures leading to an Internal Server Error are automatically reported to "
"Sentry and from there you can receive error notifications."
msgstr ""
"پس از نصب، خرابی هایی که منجر به خطای سرور داخلی می‌شوند به طور خودکار به Sentry گزارش داده می "
"شوند و از آنجا میتوانید اعلان های خطا را دریافت کنید."

#: ../../errorhandling.rst:67
msgid "See also:"
msgstr "همچنین ببینید:"

#: ../../errorhandling.rst:69
msgid ""
"Sentry also supports catching errors from a worker queue (RQ, Celery, etc.) in a similar "
"fashion. See the `Python SDK docs <https://docs.sentry.io/platforms/python/>`__ for more "
"information."
msgstr ""
"Sentry همچنین از دریافت خطاها از ایجاد کننده های صف (RQ، Celery و غیره) به روشی مشابه پشتیبانی "
"می کند. برای اطلاعات بیشتر به `اسناد SDK پایتون <https://docs.sentry.io/platforms/python/>`__ "
"مراجعه کنید."

#: ../../errorhandling.rst:72
msgid "`Getting started with Sentry <https://docs.sentry.io/quickstart/?platform=python>`__"
msgstr "`شروع کار با Sentry <https://docs.sentry.io/quickstart/?platform=python>`__"

#: ../../errorhandling.rst:73
msgid "`Flask-specific documentation <https://docs.sentry.io/platforms/python/guides/flask/>`__"
msgstr "`مستندات مخصوص فلاسک <https://docs.sentry.io/platforms/python/guides/flask/>`__"

#: ../../errorhandling.rst:77
msgid "Error Handlers"
msgstr "کنترل کننده خطا ها"

#: ../../errorhandling.rst:79
msgid ""
"When an error occurs in Flask, an appropriate `HTTP status code <https://developer.mozilla.org/"
"en-US/docs/Web/HTTP/Status>`__ will be returned. 400-499 indicate errors with the client's "
"request data, or about the data requested. 500-599 indicate errors with the server or "
"application itself."
msgstr ""
"هنگامی که خطایی در فلاسک رخ می دهد، `کد وضعیت HTTP <https://developer.mozilla.org/en-US/docs/"
"Web/HTTP/Status>`__ مناسب برگردانده می شود. کد های ۴۰۰ تا ۴۹۹ خطاهایی را که در داده های درخواست "
"کلاینت یا داده های درخواست شده وجود دارد نشان می دهد و ۵۰۰ تا ۵۹۹ خطاهای خود سرور یا برنامه را "
"نشان می دهد."

#: ../../errorhandling.rst:85
msgid ""
"You might want to show custom error pages to the user when an error occurs. This can be done by "
"registering error handlers."
msgstr ""
"ممکن است بخواهید در صورت بروز خطا، صفحات خطای سفارشی را به کاربر نشان دهید. این را می توان با "
"ثبت کنترل کننده های خطا انجام داد."

#: ../../errorhandling.rst:88
msgid ""
"An error handler is a function that returns a response when a type of error is raised, similar "
"to how a view is a function that returns a response when a request URL is matched. It is passed "
"the instance of the error being handled, which is most likely a :exc:`~werkzeug.exceptions."
"HTTPException`."
msgstr ""
"کنترل کننده خطا تابعی است که وقتی یک نوع خطا مطرح می‌شود، پاسخی را برمی‌گرداند. این شبیه view "
"تابعی است که وقتی URL درخواستی مطابقت دارد، پاسخی را بر میگرداند. خطا های در حال رسیدگی ممکن "
"است از یک :exc:`~werkzeug.exceptions.HTTPException` باشد."

#: ../../errorhandling.rst:93
msgid ""
"The status code of the response will not be set to the handler's code. Make sure to provide the "
"appropriate HTTP status code when returning a response from a handler."
msgstr ""
"کد وضعیت پاسخ روی کد کنترل کننده تنظیم نمی شود. مطمئن شوید که کد وضعیت HTTP مناسب را هنگام "
"بازگرداندن پاسخ از یک کنترل کننده ارائه می‌دهید."

#: ../../errorhandling.rst:99
msgid "Registering"
msgstr "ثبت"

#: ../../errorhandling.rst:101
msgid ""
"Register handlers by decorating a function with :meth:`~flask.Flask.errorhandler`. Or use :meth:"
"`~flask.Flask.register_error_handler` to register the function later. Remember to set the error "
"code when returning the response."
msgstr ""
"با دیکوراتور  :meth:`~flask.Flask.errorhandler` یک تابع را به عنوان کنترل کننده یا از :meth:"
"`~flask.Flask.register_error_handler` برای ثبت تابع بعدی استفاده کنید. به یاد داشته باشید که "
"کد‌خطا را هنگام برگداندن پاسخ، تنظیم کنید."

#: ../../errorhandling.rst:115
msgid ""
":exc:`werkzeug.exceptions.HTTPException` subclasses like :exc:`~werkzeug.exceptions.BadRequest` "
"and their HTTP codes are interchangeable when registering handlers. (``BadRequest.code == 400``)"
msgstr ""
"زیرکلاس های :exc:`werkzeug.exceptions.HTTPException` مانند :exc:`~werkzeug.exceptions."
"BadRequest` و کدهای HTTP آنها هنگام ثبت کنترل کننده ها قابل تعویض هستند. ( ``BadRequest.code == "
"400`` )"

#: ../../errorhandling.rst:119
msgid ""
"Non-standard HTTP codes cannot be registered by code because they are not known by Werkzeug. "
"Instead, define a subclass of :class:`~werkzeug.exceptions.HTTPException` with the appropriate "
"code and register and raise that exception class."
msgstr ""
"کدهای غیر استاندارد HTTP را نمی توان به عنوان کد ثبت کرد زیرا توسط Werkzeug شناخته شده نیستند. "
"در عوض، یک زیر کلاس از :class:`~werkzeug.exceptions.HTTPException` با کد مناسب تعریف کنید و آن "
"کلاس استثنا را ثبت و بالا ببرید."

#: ../../errorhandling.rst:134
msgid ""
"Handlers can be registered for any exception class, not just :exc:`~werkzeug.exceptions."
"HTTPException` subclasses or HTTP status codes. Handlers can be registered for a specific "
"class, or for all subclasses of a parent class."
msgstr ""
"کنترل کننده ها را می‌توان برای هر کلاس استثنا شده ثبت کرد، نه فقط زیر کلاس‌های :exc:`~werkzeug."
"exceptions.HTTPException` یا کدهای وضعیت HTTP. هندلرها را می توان برای یک کلاس خاص یا برای همه "
"زیر کلاس های یک کلاس والد ثبت کرد."

#: ../../errorhandling.rst:141
msgid "Handling"
msgstr "مدیریت"

#: ../../errorhandling.rst:143
msgid ""
"When building a Flask application you *will* run into exceptions. If some part of your code "
"breaks while handling a request (and you have no error handlers registered), a \"500 Internal "
"Server Error\" (:exc:`~werkzeug.exceptions.InternalServerError`) will be returned by default. "
"Similarly, \"404 Not Found\" (:exc:`~werkzeug.exceptions.NotFound`) error will occur if a "
"request is sent to an unregistered route. If a route receives an unallowed request method, a "
"\"405 Method Not Allowed\" (:exc:`~werkzeug.exceptions.MethodNotAllowed`) will be raised. These "
"are all subclasses of :class:`~werkzeug.exceptions.HTTPException` and are provided by default "
"in Flask."
msgstr ""
"هنگام ساختن یک برنامه فلاسک، با استثناهایی *مواجه* خواهید شد. اگر هنگام رسیدگی به درخواست، بخشی "
"از کد شما خراب باشد (و هیچ کنترل کننده خطا ثبت نشده باشد)، یک \"500 Internal Server Error\" ( :"
"exc:`~werkzeug.exceptions.InternalServerError` ) به طور پیش فرض برگردانده می شود. به طور مشابه، "
"اگر درخواستی به یک مسیر ثبت نشده ارسال شود، خطای \"404 Not Found\"  (:exc:`~werkzeug.exceptions."
"NotFound`) رخ می دهد. اگر مسیری یک روش درخواست غیرمجاز دریافت کند، یک  \"405 Method Not "
"Allowed\" (:exc:`~werkzeug.exceptions.MethodNotAllowed`) برگردانده می شود. اینها همه زیر کلاس "
"های :class:`~werkzeug.exceptions.HTTPException` هستند و به طور پیش فرض در فلاسک ارائه می شوند."

#: ../../errorhandling.rst:154
msgid ""
"Flask gives you the ability to raise any HTTP exception registered by Werkzeug. However, the "
"default HTTP exceptions return simple exception pages. You might want to show custom error "
"pages to the user when an error occurs. This can be done by registering error handlers."
msgstr ""
"فلاسک به شما این امکان را می دهد که هر استثنای HTTP ثبت شده توسط Werkzeug را افزایش دهید. با "
"این حال، استثناهای HTTP پیش‌فرض، صفحات استثنای ساده را برمی‌گردانند. ممکن است بخواهید در صورت "
"بروز خطا، صفحات خطای سفارشی را به کاربر نشان دهید. این را می توان با ثبت کنترل کننده های خطا "
"انجام داد."

#: ../../errorhandling.rst:159
msgid ""
"When Flask catches an exception while handling a request, it is first looked up by code. If no "
"handler is registered for the code, Flask looks up the error by its class hierarchy; the most "
"specific handler is chosen. If no handler is registered, :class:`~werkzeug.exceptions."
"HTTPException` subclasses show a generic message about their code, while other exceptions are "
"converted to a generic \"500 Internal Server Error\"."
msgstr ""
"هنگامی که فلاسک در حین رسیدگی به یک درخواست، استثنایی را می گیرد، ابتدا با کد جست و جو میشود. "
"اگر هیچ کنترل کننده ای برای کد ثبت نشده باشد، فلاسک خطا را بر اساس سلسله مراتب کلاس خود جستجو "
"می کند. خاص ترین کنترل کننده انتخاب می شود. اگر کنترل‌کننده‌ای ثبت نشده باشد، زیر کلاس‌های :class:"
"`~werkzeug.exceptions.HTTPException` یک پیام عمومی در مورد کد خود نشان می‌دهند، در حالی که سایر "
"استثناها به یک \"500 Internal Server Error\" عمومی تبدیل می‌شوند."

#: ../../errorhandling.rst:165
msgid ""
"For example, if an instance of :exc:`ConnectionRefusedError` is raised, and a handler is "
"registered for :exc:`ConnectionError` and :exc:`ConnectionRefusedError`, the more specific :exc:"
"`ConnectionRefusedError` handler is called with the exception instance to generate the response."
msgstr ""
"به عنوان مثال، اگر نمونه ای از :exc:`ConnectionRefusedError` مطرح شود، و یک کنترل کننده برای :"
"exc:`ConnectionError` و :exc:`ConnectionRefusedError` ثبت شود، کنترل کننده خاص تر :class:"
"`~werkzeug.exceptions.HTTPException` با نمونه استثنایی برای تولید پاسخ است."

#: ../../errorhandling.rst:170
msgid ""
"Handlers registered on the blueprint take precedence over those registered globally on the "
"application, assuming a blueprint is handling the request that raises the exception. However, "
"the blueprint cannot handle 404 routing errors because the 404 occurs at the routing level "
"before the blueprint can be determined."
msgstr ""
"کنترل‌کننده‌های ثبت‌شده در طرح اولیه بر آن‌هایی که در سطح سراسری(global) در برنامه ثبت شده‌اند، "
"اولویت دارند، با این فرض که یک طرح در حال رسیدگی به درخواستی است که استثنا را ایجاد می‌کند. با "
"این حال، طرح اولیه نمی تواند خطاهای مسیریابی 404 را مدیریت کند زیرا 404 قبل از تعیین نقشه در "
"سطح مسیریابی رخ می دهد."

#: ../../errorhandling.rst:178
msgid "Generic Exception Handlers"
msgstr "کنترل کننده های استثنای عمومی"

#: ../../errorhandling.rst:180
msgid ""
"It is possible to register error handlers for very generic base classes such as "
"``HTTPException`` or even ``Exception``. However, be aware that these will catch more than you "
"might expect."
msgstr ""
"ثبت کنترل‌کننده‌های خطا برای کلاس‌های پایه بسیار عمومی مانند ``HTTPException`` یا حتی "
"``Exception`` امکان‌پذیر است. با این حال، توجه داشته باشید که این موارد بیشتر از آنچه انتظار "
"دارید می گیرند."

#: ../../errorhandling.rst:184
msgid ""
"For example, an error handler for ``HTTPException`` might be useful for turning the default "
"HTML errors pages into JSON. However, this handler will trigger for things you don't cause "
"directly, such as 404 and 405 errors during routing. Be sure to craft your handler carefully so "
"you don't lose information about the HTTP error."
msgstr ""
"برای مثال، یک کنترل کننده خطا برای ``HTTPException`` ممکن است برای تبدیل صفحات پیش‌فرض خطاهای "
"HTML به JSON مفید باشد. با این حال، این کنترل کننده برای مواردی که شما مستقیماً ایجاد نمی کنید، "
"مانند خطاهای 404 و 405 در طول مسیریابی، فعال می شود. حتماً کنترلر خود را با دقت طراحی کنید تا "
"اطلاعات مربوط به خطای HTTP را از دست ندهید."

#: ../../errorhandling.rst:209
msgid ""
"An error handler for ``Exception`` might seem useful for changing how all errors, even "
"unhandled ones, are presented to the user. However, this is similar to doing ``except Exception:"
"`` in Python, it will capture *all* otherwise unhandled errors, including all HTTP status codes."
msgstr ""
"یک کنترل کننده خطا برای ``Exception`` ممکن است برای تغییر نحوه ارائه همه خطاها، حتی خطاهای "
"کنترل نشده، به کاربر مفید به نظر برسد. با این حال، این شبیه به انجام ``except Exception:`` در "
"پایتون است، *همه* خطاهای غیرقابل کنترل، از جمله همه کدهای وضعیت HTTP را می گیرد."

#: ../../errorhandling.rst:215
msgid ""
"In most cases it will be safer to register handlers for more specific exceptions. Since "
"``HTTPException`` instances are valid WSGI responses, you could also pass them through directly."
msgstr ""
"در بیشتر موارد، ثبت کنترل کننده ها برای استثناهای خاص تر ایمن تر خواهد بود. از آنجایی که "
"نمونه‌های ``HTTPException`` پاسخ‌های معتبر WSGI هستند، می‌توانید مستقیماً آنها را نیز ارسال کنید."

#: ../../errorhandling.rst:232
msgid ""
"Error handlers still respect the exception class hierarchy. If you register handlers for both "
"``HTTPException`` and ``Exception``, the ``Exception`` handler will not handle "
"``HTTPException`` subclasses because it the ``HTTPException`` handler is more specific."
msgstr ""
"کنترل کننده های خطا همچنان به سلسله مراتب کلاس exception احترام می گذارند. اگر کنترل‌کننده‌ها را "
"برای ``HTTPException`` و ``Exception`` ثبت کنید، کنترل‌کننده ``Exception`` زیرکلاس‌های "
"``HTTPException`` را کنترل نمی‌کند زیرا کنترل‌کننده ``HTTPException`` خاص‌تر هستند."

#: ../../errorhandling.rst:239
msgid "Unhandled Exceptions"
msgstr "استثناهای کنترل نشده"

#: ../../errorhandling.rst:241
msgid ""
"When there is no error handler registered for an exception, a 500 Internal Server Error will be "
"returned instead. See :meth:`flask.Flask.handle_exception` for information about this behavior."
msgstr ""
"هنگامی که کنترل کننده خطا برای یک استثنا ثبت نشده است، به جای آن یک خطای سرور داخلی 500 "
"برگردانده می شود. برای اطلاعات در مورد این رفتار به :meth:`flask.Flask.handle_exception` مراجعه "
"کنید."

#: ../../errorhandling.rst:246
msgid ""
"If there is an error handler registered for ``InternalServerError``, this will be invoked. As "
"of Flask 1.1.0, this error handler will always be passed an instance of "
"``InternalServerError``, not the original unhandled error."
msgstr ""
"اگر یک کنترل کننده خطا برای ``InternalServerError`` ثبت شده باشد، این مورد فراخوانی می شود. از "
"فلاسک 1.1.0، این کنترل کننده خطا همیشه یک نمونه از ``InternalServerError`` ارسال می شود، نه "
"خطای کنترل نشده اصلی."

#: ../../errorhandling.rst:251
msgid "The original error is available as ``e.original_exception``."
msgstr "خطای اصلی به عنوان ``e.original_exception`` موجود است."

#: ../../errorhandling.rst:253
msgid ""
"An error handler for \"500 Internal Server Error\" will be passed uncaught exceptions in "
"addition to explicit 500 errors. In debug mode, a handler for \"500 Internal Server Error\" "
"will not be used. Instead, the interactive debugger will be shown."
msgstr ""
"یک کنترل کننده خطا برای \"500 Internal Server Error\" علاوه بر خطاهای ۵۰۰ صریح، به استثناهای "
"غیرقابل کشف منتقل می شود. در حالت اشکال زدایی، یک کنترل کننده برای \"500 Internal Server "
"Error\" استفاده نخواهد شد. در عوض، دیباگر تعاملی نشان داده خواهد شد."

#: ../../errorhandling.rst:260
msgid "Custom Error Pages"
msgstr "صفحات خطای سفارشی"

#: ../../errorhandling.rst:262
msgid ""
"Sometimes when building a Flask application, you might want to raise a :exc:`~werkzeug."
"exceptions.HTTPException` to signal to the user that something is wrong with the request. "
"Fortunately, Flask comes with a handy :func:`~flask.abort` function that aborts a request with "
"a HTTP error from werkzeug as desired. It will also provide a plain black and white error page "
"for you with a basic description, but nothing fancy."
msgstr ""
"گاهی اوقات هنگام ساختن یک برنامه فلاسک، ممکن است بخواهید یک :exc:`~werkzeug.exceptions."
"HTTPException` را مطرح کنید تا به کاربر علامت دهد که مشکلی در درخواست وجود دارد. خوشبختانه، "
"فلاسک دارای یک تابع مفید :func:`~flask.abort` است که درخواستی با خطای HTTP از werkzeug را به "
"دلخواه لغو می کند. همچنین یک صفحه خطای سیاه و سفید ساده با توضیحات اولیه برای شما ارائه می دهد، "
"اما هیچ چیز جالبی نیست."

#: ../../errorhandling.rst:269
msgid ""
"Depending on the error code it is less or more likely for the user to actually see such an "
"error."
msgstr "بسته به کد خطا، احتمال اینکه کاربر واقعاً چنین خطایی را ببیند، کم یا زیاد است."

#: ../../errorhandling.rst:272
msgid ""
"Consider the code below, we might have a user profile route, and if the user fails to pass a "
"username we can raise a \"400 Bad Request\". If the user passes a username and we can't find "
"it, we raise a \"404 Not Found\"."
msgstr ""
"کد زیر را در نظر بگیرید، ممکن است یک مسیر پروفایل کاربری داشته باشیم، و اگر کاربر نتواند یک نام "
"کاربری را ارسال کند، می توانیم یک \"400 Bad Request\" ارسال کنیم. اگر کاربر یک نام کاربری را "
"ارسال کند و ما نتوانیم آن را پیدا کنیم، \"404 Not Found\" را بر می گردانیم."

#: ../../errorhandling.rst:296
msgid "Here is another example implementation for a \"404 Page Not Found\" exception:"
msgstr "در اینجا مثال دیگری برای اجرای استثنای \"404 Page Not Found\" آمده است:"

#: ../../errorhandling.rst:307 ../../errorhandling.rst:361
msgid "When using :doc:`/patterns/appfactories`:"
msgstr "هنگام استفاده از :doc:`/patterns/appfactories` :"

#: ../../errorhandling.rst:321
msgid "An example template might be this:"
msgstr "یک نمونه الگو میتواند شبیه این باشد:"

#: ../../errorhandling.rst:335
msgid "Further Examples"
msgstr "مثال های بیشتر"

#: ../../errorhandling.rst:337
msgid ""
"The above examples wouldn't actually be an improvement on the default exception pages. We can "
"create a custom 500.html template like this:"
msgstr ""
"مثال‌های بالا در واقع بهبودی در صفحات استثنای پیش‌فرض نیستند. ما می توانیم یک الگوی سفارشی 500."
"html مانند این ایجاد کنیم:"

#: ../../errorhandling.rst:350
msgid "It can be implemented by rendering the template on \"500 Internal Server Error\":"
msgstr "می توان آن را با رندر کردن قالب روی \"500 Internal Server Error\" پیاده سازی کرد:"

#: ../../errorhandling.rst:375
msgid "When using :doc:`/blueprints`:"
msgstr "هنگام استفاده از :doc:`/blueprints` :"

#: ../../errorhandling.rst:393
msgid "Blueprint Error Handlers"
msgstr "کنترل کننده های خطا در Blueprint"

#: ../../errorhandling.rst:395
msgid ""
"In :doc:`/blueprints`, most error handlers will work as expected. However, there is a caveat "
"concerning handlers for 404 and 405 exceptions. These error handlers are only invoked from an "
"appropriate ``raise`` statement or a call to ``abort`` in another of the blueprint's view "
"functions; they are not invoked by, e.g., an invalid URL access."
msgstr ""
"در :doc:`/blueprints` ، اکثر کنترل کننده های خطا همانطور که انتظار می رود کار می کنند. با این "
"حال، یک هشدار در مورد کنترل کننده ها برای استثناهای 404 و 405 وجود دارد. این کنترل‌کننده‌های خطا "
"فقط از یک عبارت ``raise`` مناسب یا فراخوانی ``abort`` در یکی از توابع blueprint فراخوانی می‌شوند "
"نه توسط دسترسی به URL نامعتبر."

#: ../../errorhandling.rst:401
msgid ""
"This is because the blueprint does not \"own\" a certain URL space, so the application instance "
"has no way of knowing which blueprint error handler it should run if given an invalid URL. If "
"you would like to execute different handling strategies for these errors based on URL prefixes, "
"they may be defined at the application level using the ``request`` proxy object."
msgstr ""
"این به این دلیل است که طرح دارای یک فضای URL خاص نیست، بنابراین نمونه برنامه راهی برای دانستن "
"اینکه در صورت داشتن URL نامعتبر باید کدام یک از کنترل کننده خطای طرح را اجرا کند، ندارد. اگر "
"می‌خواهید استراتژی‌های مدیریت متفاوتی را برای این خطاها بر اساس پیشوندهای URL اجرا کنید، ممکن است "
"آنها در سطح برنامه با استفاده از شی پراکسی ``request``  تعریف شوند."

#: ../../errorhandling.rst:436
msgid "Returning API Errors as JSON"
msgstr "برگرداندن خطاهای API به صورت JSON"

#: ../../errorhandling.rst:438
msgid ""
"When building APIs in Flask, some developers realise that the built-in exceptions are not "
"expressive enough for APIs and that the content type of :mimetype:`text/html` they are emitting "
"is not very useful for API consumers."
msgstr ""
"هنگام ساختن APIها در فلاسک، برخی از توسعه دهندگان متوجه می شوند که استثناهای داخلی به اندازه "
"کافی برای API ها گویا نیستند و :mimetype:`text/html` که منتشر می کنند برای مصرف کنندگان API "
"چندان مفید نیست."

#: ../../errorhandling.rst:442
msgid ""
"Using the same techniques as above and :func:`~flask.json.jsonify` we can return JSON responses "
"to API errors.  :func:`~flask.abort` is called with a ``description`` parameter. The error "
"handler will use that as the JSON error message, and set the status code to 404."
msgstr ""
"با استفاده از تکنیک‌های مشابه بالا و :func:`~flask.json.jsonify` می‌توانیم پاسخ‌های JSON را به "
"خطاهای API برگردانیم. :func:`~flask.abort` با پارامتر ``description`` فراخوانی می شود. کنترل "
"کننده خطا از آن به عنوان پیام خطای JSON استفاده می کند و کد وضعیت را روی 404 تنظیم می کند."

#: ../../errorhandling.rst:464
msgid ""
"We can also create custom exception classes. For instance, we can introduce a new custom "
"exception for an API that can take a proper human readable message, a status code for the error "
"and some optional payload to give more context for the error."
msgstr ""
"ما همچنین می توانیم کلاس های استثنای سفارشی ایجاد کنیم. به عنوان مثال، می‌توانیم یک استثنای "
"سفارشی جدید برای یک API معرفی کنیم که می‌تواند یک پیام قابل خواندن توسط انسان، یک کد وضعیت برای "
"خطا و مقداری بار اختیاری برای ارائه زمینه بیشتر برای خطا دریافت کند."

#: ../../errorhandling.rst:469
msgid "This is a simple example:"
msgstr "یک مثال ساده:"

#: ../../errorhandling.rst:508
msgid ""
"A view can now raise that exception with an error message. Additionally some extra payload can "
"be provided as a dictionary through the `payload` parameter."
msgstr ""
"اکنون یک view می تواند آن استثنا را با یک پیام خطا ایجاد کند. علاوه بر این، برخی از محموله های "
"اضافی را می توان به عنوان dictionary از طریق پارامتر `payload` ارائه کرد."

#: ../../errorhandling.rst:514
msgid "Logging"
msgstr "لاگ کردن"

#: ../../errorhandling.rst:516
msgid ""
"See :doc:`/logging` for information about how to log exceptions, such as by emailing them to "
"admins."
msgstr ""
"برای اطلاعات در مورد نحوه ثبت استثناها، مانند ارسال ایمیل به مدیران، به :doc:`/logging` مراجعه "
"کنید."

#: ../../errorhandling.rst:521
msgid "Debugging"
msgstr "اشکال زدایی"

#: ../../errorhandling.rst:523
msgid ""
"See :doc:`/debugging` for information about how to debug errors in development and production."
msgstr ""
"برای اطلاعات در مورد نحوه اشکال زدایی خطاها در توسعه و تولید به :doc:`/debugging` مراجعه کنید."
