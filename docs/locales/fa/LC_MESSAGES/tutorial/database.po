# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-08 08:56+0330\n"
"PO-Revision-Date: 2021-12-14 15:15+0330\n"
"Language-Team: fa <ahmdparsh129@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator:  Komeil Parseh  <ahmdparsh129@gmail.com>\n"
"Language: per\n"
"X-Generator: Poedit 3.0\n"

#: ../../tutorial/database.rst:4
msgid "Define and Access the Database"
msgstr "تعریف و دسترسی به دیتا بیس"

#: ../../tutorial/database.rst:6
msgid ""
"The application will use a `SQLite`_ database to store users and posts. "
"Python comes with built-in support for SQLite in the :mod:`sqlite3` "
"module."
msgstr ""
"این برنامه میخواهد از دیتا بیس `SQLite`_ انبار کردن کاربران و پست ها "
"استفاده کند. پایتون با پشتیبانی داخلی از SQLite در ماژول :mod:`sqlite3` "
"آمده است."

#: ../../tutorial/database.rst:10
msgid ""
"SQLite is convenient because it doesn't require setting up a separate "
"database server and is built-in to Python. However, if concurrent "
"requests try to write to the database at the same time, they will slow "
"down as each write happens sequentially. Small applications won't notice "
"this. Once you become big, you may want to switch to a different "
"database."
msgstr ""
"SQLite راحت است زیرا هیچ الزامی برای راه‌اندازی جداگانه سرور ندارد و "
"همچنین به صورت داخلی در پایتون قرار دارد. با این حال اگر چند درخواست "
"همزمان بخواهند، به صورت همزمان در دیتا بیس داده بنویسند، سرعت بسیار کاهش "
"میابد. البته این کاهش سرعت در برنامه های کوچک محسوس نیست. هنگامی که بزرگ "
"شدید، شاید بخواهید از دیتا بیس دیگری استفاده کنید."

#: ../../tutorial/database.rst:17
msgid ""
"The tutorial doesn't go into detail about SQL. If you are not familiar "
"with it, the SQLite docs describe the `language`_."
msgstr ""
"این آموزش درباره SQL نیست. اگر شما به این آشنا نیستید، مستندات SQLite در "
"`language`_ شرح داده شده است."

#: ../../tutorial/database.rst:25
msgid "Connect to the Database"
msgstr "اتصال به دیتابیس"

#: ../../tutorial/database.rst:27
msgid ""
"The first thing to do when working with a SQLite database (and most "
"other Python database libraries) is to create a connection to it. Any "
"queries and operations are performed using the connection, which is "
"closed after the work is finished."
msgstr ""
"اولین چیز این است که کجا با دیتا بیس SQLite (و سایر کتابخانه های دیتا "
"بیس پایتون) یک اتصال بسازید؛ اکثر کوئری ها و عملیات ها در پلتفرم با "
"استفاده از اتصال انجام میشوند و پس از اتمام کار بسته میشوند."

#: ../../tutorial/database.rst:32
msgid ""
"In web applications this connection is typically tied to the request. It "
"is created at some point when handling a request, and closed before the "
"response is sent."
msgstr ""
"در برنامه های وب، این اتصال معمولا به درخواست مرتبط است. این اتصال در "
"زمان رسیدگی به درخواست ایجاد میشود و قبل از ارسال پاسخ، بسته می شود."

#: ../../tutorial/database.rst:36 ../../tutorial/database.rst:120
#: ../../tutorial/database.rst:157
msgid "``flaskr/db.py``"
msgstr "``flaskr/db.py``"

#: ../../tutorial/database.rst:63
msgid ""
":data:`g` is a special object that is unique for each request. It is "
"used to store data that might be accessed by multiple functions during "
"the request. The connection is stored and reused instead of creating a "
"new connection if ``get_db`` is called a second time in the same request."
msgstr ""
":data:`g` یک شی خاص است که برای هر درخواست، منحصر بفرد است. برای ذخیره "
"داده هایی استفاده میشود که ممکن است توسط چندین تابع در طول درخواست قابل "
"دسترسی باشد. اگر ``get_db`` برای بار دوم در آن درخواست، فراخوانی شود، به "
"جای ایجاد یک اتصال جدید، اتصال ذخیره و دوباره استفاده می شود."

#: ../../tutorial/database.rst:69
msgid ""
":data:`current_app` is another special object that points to the Flask "
"application handling the request. Since you used an application factory, "
"there is no application object when writing the rest of your code. "
"``get_db`` will be called when the application has been created and is "
"handling a request, so :data:`current_app` can be used."
msgstr ""
":data:`current_app` یک شی خاص دیگر است که به برنامه فلاسک اشاره میکند تا "
"درخواست را مدیریت کند. از آنجایی که شما از کارخانه برنامه کاربردی "
"استفاده می‌کنید، هنگام نوشتن بقیه کد، شما هیچ شی دیگری برای برنامه "
"نمیسازید. ``get_db`` زمانی فراخوانده می شود که برنامه ایجاد شود . در حال "
"رسیدگی به درخواست باشد، بنابراین میتوان از :data:`current_app` استفاده "
"کرد."

#: ../../tutorial/database.rst:75
msgid ""
":func:`sqlite3.connect` establishes a connection to the file pointed at "
"by the ``DATABASE`` configuration key. This file doesn't have to exist "
"yet, and won't until you initialize the database later."
msgstr ""
":func:`sqlite3.connect` ارتباطی را با فایلی که توسط کلید پیکربندی که "
"به`DATABASE`` اشاره شده است، برقرار میکند. این فایل هنوز لازم نیست وجود "
"داشته باشد و تا زمانی که دیتابیس را بعدا مقداردهی نکنید، وجود نخواهد "
"داشت."

#: ../../tutorial/database.rst:79
msgid ""
":class:`sqlite3.Row` tells the connection to return rows that behave "
"like dicts. This allows accessing the columns by name."
msgstr ""
":class:`sqlite3.Row` به اتصال می گوید که ردیف هایی را که مانند دیکشنری "
"ها رفتار می کنند، برگرداند. این اجازه می دهد تا به ستون ها با نام دسترسی "
"داشته باشید."

#: ../../tutorial/database.rst:82
msgid ""
"``close_db`` checks if a connection was created by checking if ``g.db`` "
"was set. If the connection exists, it is closed. Further down you will "
"tell your application about the ``close_db`` function in the application "
"factory so that it is called after each request."
msgstr ""
"``close_db`` با بررسی اینکه `g.db`` تنظیم شده است، بررسی می‌کند که آیا یک "
"اتصال ایجاد شده است. اگر اتصال وجود داشته باشد، بسته است. در ادامه به "
"برنامه خود در مورد عملکرد ``close_db`` در کارخانه برنامه خواهید گفت تا "
"پس از هر درخواست فراخوانی شود."

#: ../../tutorial/database.rst:89
msgid "Create the Tables"
msgstr "ساخته جدول ها"

#: ../../tutorial/database.rst:91
msgid ""
"In SQLite, data is stored in *tables* and *columns*. These need to be "
"created before you can store and retrieve data. Flaskr will store users "
"in the ``user`` table, and posts in the ``post`` table. Create a file "
"with the SQL commands needed to create empty tables:"
msgstr ""
"در SQLite، داده ها در *tables* و *columns* انبار میشوند. آنها نیاز "
"دارند، قبل از انبار شدن و پس گرفتن داده ها، ساخته شوند. Flaskr میخواهد "
"کاربران را در جدول ``user`` و پست ها را در جدول ``post`` انبار کند. یک "
"فایل با دستور های SQL نیاز است تا جدول خالی ساخته شود. آن را بسازید:"

#: ../../tutorial/database.rst:96
msgid "``flaskr/schema.sql``"
msgstr "``flaskr/schema.sql``"

#: ../../tutorial/database.rst:117
msgid ""
"Add the Python functions that will run these SQL commands to the ``db."
"py`` file:"
msgstr "و توابع پایتون دستورات SQL را در فایل ``db.py`` اجرا خواهند کرد:"

#: ../../tutorial/database.rst:137
msgid ""
":meth:`open_resource() <Flask.open_resource>` opens a file relative to "
"the ``flaskr`` package, which is useful since you won't necessarily know "
"where that location is when deploying the application later. ``get_db`` "
"returns a database connection, which is used to execute the commands "
"read from the file."
msgstr ""
":meth:`open_resource() <Flask.open_resource>` فایلی را نسبت به بسته "
"``flaskr`` باز می کند، که مفید است زیرا در زمان استقرار برنامه لزوماً نمی "
"دانید آن مکان کجاست. ``get_db`` یک اتصال پایگاه داده را برمی گرداند که "
"برای اجرای دستورات خوانده شده از فایل استفاده می شود."

#: ../../tutorial/database.rst:143
msgid ""
":func:`click.command` defines a command line command called ``init-db`` "
"that calls the ``init_db`` function and shows a success message to the "
"user. You can read :doc:`/cli` to learn more about writing commands."
msgstr ""
":func:`click.command` یک خط فرمان به نام ``init-db`` را تعریف می کند که "
"تابع ``init_db`` را فراخوانی می کند و پیام موفقیت آمیز را به کاربر نشان "
"می دهد. برای کسب اطلاعات بیشتر در مورد نوشتن دستورات می توانید :doc:`/"
"cli` را بخوانید."

#: ../../tutorial/database.rst:149
msgid "Register with the Application"
msgstr "ثبت نام با برنامه"

#: ../../tutorial/database.rst:151
msgid ""
"The ``close_db`` and ``init_db_command`` functions need to be registered "
"with the application instance; otherwise, they won't be used by the "
"application. However, since you're using a factory function, that "
"instance isn't available when writing the functions. Instead, write a "
"function that takes an application and does the registration."
msgstr ""
"توابع ``close_db`` و ``indit_db_command‍‍`` باید در نمونه برنامه ثبت شوند. "
"در غیر این صورت، آنها توسط برنامه استفاده نخواهند شد. با این حال، از "
"آنجایی که شما از یک تابع کارخانه استفاده می کنید، این نمونه هنگام نوشتن "
"توابع در دسترس نیست. در عوض، تابعی بنویسید که یک برنامه کاربردی را می "
"گیرد و ثبت را انجام می دهد."

#: ../../tutorial/database.rst:164
msgid ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` tells "
"Flask to call that function when cleaning up after returning the "
"response."
msgstr ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` به فلاسک "
"می گوید که هنگام پاکسازی پس از بازگرداندن پاسخ، آن تابع را فراخوانی کند."

#: ../../tutorial/database.rst:168
msgid ""
":meth:`app.cli.add_command() <click.Group.add_command>` adds a new "
"command that can be called with the ``flask`` command."
msgstr ""
":meth:`app.cli.add_command() <click.Group.add_command>` یک دستور جدید "
"اضافه می کند که می تواند با دستور ``flask`` فراخوانی شود."

#: ../../tutorial/database.rst:171
msgid ""
"Import and call this function from the factory. Place the new code at "
"the end of the factory function before returning the app."
msgstr ""
"این تابع را از کارخانه وارد کرده و فراخوانی کنید. قبل از بازگرداندن "
"برنامه، کد جدید را در انتهای عملکرد کارخانه قرار دهید."

#: ../../tutorial/database.rst:174
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/database.rst:188
msgid "Initialize the Database File"
msgstr "راه اندازی فایل پایگاه داده"

#: ../../tutorial/database.rst:190
msgid ""
"Now that ``init-db`` has been registered with the app, it can be called "
"using the ``flask`` command, similar to the ``run`` command from the "
"previous page."
msgstr ""
"اکنون که ``init-db`` در برنامه ثبت شده است، می توان با استفاده از دستور "
"``flask``، مشابه دستور ``run`` از صفحه قبل، آن را فراخوانی کرد."

#: ../../tutorial/database.rst:196
msgid ""
"If you're still running the server from the previous page, you can "
"either stop the server, or run this command in a new terminal. If you "
"use a new terminal, remember to change to your project directory and "
"activate the env as described in :doc:`/installation`. You'll also need "
"to set ``FLASK_APP`` and ``FLASK_ENV`` as shown on the previous page."
msgstr ""
"اگر هنوز سرور صفحه قبلی را اجرا می کنید، می توانید سرور را متوقف کنید یا "
"این دستور را در یک ترمینال جدید اجرا کنید. اگر از ترمینال جدیدی استفاده "
"می کنید، به یاد داشته باشید که به دایرکتوری پروژه خود تغییر دهید و env "
"را همانطور که در :doc:`/installation` توضیح داده شده فعال کنید. همچنین "
"باید ``FLASK_APP`` و ``FLASK_ENV`` را همانطور که در صفحه قبل نشان داده "
"شده است تنظیم کنید."

#: ../../tutorial/database.rst:203
msgid "Run the ``init-db`` command:"
msgstr "دستور ``init-db`` را اجرا کنید:"

#: ../../tutorial/database.rst:210
msgid ""
"There will now be a ``flaskr.sqlite`` file in the ``instance`` folder in "
"your project."
msgstr ""
"اکنون فایل ``flaskr.sqlite`` در پوشه ``instance`` در پروژه خواهد بود."

#: ../../tutorial/database.rst:213
msgid "Continue to :doc:`views`."
msgstr "با :doc:`views` ادامه دهید."
