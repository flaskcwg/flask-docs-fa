# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-08 08:56+0330\n"
"PO-Revision-Date: 2022-01-02 19:39+0330\n"
"Language-Team: fa <ahmdparsh129@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n==0 || n==1);\n"
"Last-Translator:  Komeil Parseh  <ahmdparsh129@gmail.com>\n"
"Language: fa\n"
"X-Generator: Poedit 3.0\n"

#: ../../tutorial/tests.rst:4
msgid "Test Coverage"
msgstr "پوشش تست"

#: ../../tutorial/tests.rst:6
msgid ""
"Writing unit tests for your application lets you check that the code you wrote "
"works the way you expect. Flask provides a test client that simulates requests to "
"the application and returns the response data."
msgstr ""
"نوشتن تست‌های واحد برای برنامه به شما امکان می‌دهد بررسی کنید که کدی که نوشته‌اید "
"همان‌طور که انتظار دارید کار می‌کند. فلاسک یک سرویس گیرنده آزمایشی ارائه می دهد که "
"درخواست ها را به برنامه شبیه سازی می کند و داده های پاسخ را برمی گرداند."

#: ../../tutorial/tests.rst:10
msgid ""
"You should test as much of your code as possible. Code in functions only runs when "
"the function is called, and code in branches, such as ``if`` blocks, only runs "
"when the condition is met. You want to make sure that each function is tested with "
"data that covers each branch."
msgstr ""
"شما باید تا حد امکان کد خود را آزمایش کنید. کد در توابع تنها زمانی اجرا می‌شود که "
"تابع فراخوانی شود و کد در شاخه‌ها، مانند بلوک‌های``if``، تنها زمانی اجرا می‌شود که "
"شرط برقرار باشد. شما می خواهید مطمئن شوید که هر تابع با داده هایی که هر شاخه را "
"پوشش می دهد آزمایش می شود."

#: ../../tutorial/tests.rst:15
#, python-format
msgid ""
"The closer you get to 100% coverage, the more comfortable you can be that making a "
"change won't unexpectedly change other behavior. However, 100% coverage doesn't "
"guarantee that your application doesn't have bugs. In particular, it doesn't test "
"how the user interacts with the application in the browser. Despite this, test "
"coverage is an important tool to use during development."
msgstr ""
"هرچه به پوشش ۱۰۰ درصدی نزدیک‌تر شوید، راحت‌تر خواهید بود که ایجاد تغییر به‌طور "
"غیرمنتظره رفتارهای دیگر را تغییر نمی‌دهد. با این حال، پوشش ۱۰۰ درصدی تضمین نمی کند "
"که برنامه شما باگ نداشته باشد. به ویژه، نحوه تعامل کاربر با برنامه در مرورگر را "
"آزمایش نمی کند. با وجود این، پوشش تست ابزار مهمی برای استفاده در طول توسعه است."

#: ../../tutorial/tests.rst:23
msgid ""
"This is being introduced late in the tutorial, but in your future projects you "
"should test as you develop."
msgstr ""
"این در اواخر آموزش معرفی شده است، اما در پروژه های آینده خود باید همزمان با توسعه "
"آزمایش کنید."

#: ../../tutorial/tests.rst:26
msgid ""
"You'll use `pytest`_ and `coverage`_ to test and measure your code. Install them "
"both:"
msgstr ""
"برای آزمایش و اندازه گیری کد خود از `pytest`_ و `coverage`_ استفاده خواهید کرد. هر "
"دو را نصب کنید:"

#: ../../tutorial/tests.rst:38
msgid "Setup and Fixtures"
msgstr "راه اندازی و لوازم"

#: ../../tutorial/tests.rst:40
msgid ""
"The test code is located in the ``tests`` directory. This directory is *next to* "
"the ``flaskr`` package, not inside it. The ``tests/conftest.py`` file contains "
"setup functions called *fixtures* that each test will use. Tests are in Python "
"modules that start with ``test_``, and each test function in those modules also "
"starts with ``test_``."
msgstr ""
"کد تست در دایرکتوری ``tests`` قرار دارد. این دایرکتوری *کنار* بسته ``flaskr`` است، "
"نه داخل آن. فایل ``tests/conftest.py`` حاوی توابع راه اندازی به نام *fixtures* است "
"که هر تست از آنها استفاده خواهد کرد. تست‌ها در ماژول‌های پایتون هستند که با  "
"``test_`` شروع می‌شوند، و هر تابع تست در آن ماژول‌ها نیز با  ``test_`` شروع می‌شود."

#: ../../tutorial/tests.rst:47
msgid ""
"Each test will create a new temporary database file and populate some data that "
"will be used in the tests. Write a SQL file to insert that data."
msgstr ""
"هر آزمون یک فایل پایگاه داده موقت جدید ایجاد می کند و برخی از داده ها را پر می کند "
"که در آزمایش ها استفاده می شود. یک فایل SQL برای درج آن داده بنویسید."

#: ../../tutorial/tests.rst:51
msgid "``tests/data.sql``"
msgstr "``tests/data.sql``"

#: ../../tutorial/tests.rst:63
msgid ""
"The ``app`` fixture will call the factory and pass ``test_config`` to configure "
"the application and database for testing instead of using your local development "
"configuration."
msgstr ""
"کارخانه لوازم ``app`` را فراخوانی می کند و به جای استفاده از پیکربندی توسعه محلی "
"شما، \"test_config\" را برای تعیین برنامه و پایگاه داده برای آزمایش پیکربندی می "
"کند."

#: ../../tutorial/tests.rst:67 ../../tutorial/tests.rst:226
msgid "``tests/conftest.py``"
msgstr "``tests/conftest.py``"

#: ../../tutorial/tests.rst:109
msgid ""
":func:`tempfile.mkstemp` creates and opens a temporary file, returning the file "
"descriptor and the path to it. The ``DATABASE`` path is overridden so it points to "
"this temporary path instead of the instance folder. After setting the path, the "
"database tables are created and the test data is inserted. After the test is over, "
"the temporary file is closed and removed."
msgstr ""
":func:`tempfile.mkstemp` یک فایل موقت ایجاد و باز می کند و توصیفگر فایل و مسیر به "
"آن را برمی گرداند. مسیر ``DATABASE`` لغو شده است، بنابراین به جای پوشه نمونه به "
"این مسیر موقت اشاره می کند. پس از تنظیم مسیر، جداول پایگاه داده ایجاد شده و داده "
"های تست درج می شود. پس از اتمام تست، فایل موقت بسته و حذف می شود."

#: ../../tutorial/tests.rst:116
msgid ""
":data:`TESTING` tells Flask that the app is in test mode. Flask changes some "
"internal behavior so it's easier to test, and other extensions can also use the "
"flag to make testing them easier."
msgstr ""
":data:`TESTING` به فلاسک می گوید که برنامه در حالت تست است. فلاسک برخی از رفتارهای "
"داخلی را تغییر می‌دهد، بنابراین آزمایش آن آسان‌تر است، و سایر برنامه‌های افزودنی نیز "
"می‌توانند از پرچم برای آسان‌تر کردن آزمایش آن‌ها استفاده کنند."

#: ../../tutorial/tests.rst:120
msgid ""
"The ``client`` fixture calls :meth:`app.test_client() <Flask.test_client>` with "
"the application object created by the ``app`` fixture. Tests will use the client "
"to make requests to the application without running the server."
msgstr ""
"ابزار  ``client`` fixture calls :meth:`app.test_client() <Flask.test_client>` را "
"با شی برنامه ایجاد شده توسط فیکسچر ``app`` فراخوانی می کند. تست‌ها از کلاینت برای "
"ارسال درخواست به برنامه بدون اجرای سرور استفاده می‌کنند."

#: ../../tutorial/tests.rst:125
msgid ""
"The ``runner`` fixture is similar to ``client``. :meth:`app.test_cli_runner() "
"<Flask.test_cli_runner>` creates a runner that can call the Click commands "
"registered with the application."
msgstr ""
"فیکسچر ``runner`` شبیه ``client`` است. :meth:`app.test_cli_runner() <Flask."
"test_cli_runner>` یک runner ایجاد می کند که می تواند دستورات Click ثبت شده در "
"برنامه را فراخوانی کند."

#: ../../tutorial/tests.rst:129
msgid ""
"Pytest uses fixtures by matching their function names with the names of arguments "
"in the test functions. For example, the ``test_hello`` function you'll write next "
"takes a ``client`` argument. Pytest matches that with the ``client`` fixture "
"function, calls it, and passes the returned value to the test function."
msgstr ""
"Pytest از ابزار ها با تطبیق نام توابع آنها با نام آرگومان ها در توابع تست استفاده "
"می کند. به عنوان مثال، تابع ``test_hello`` که در ادامه می نویسید، آرگومان "
"``client`` را می گیرد. Pytest آن را با تابع ثابت ``client`` مطابقت می دهد، آن را "
"فراخوانی می کند و مقدار بازگشتی را به تابع تست ارسال می کند."

#: ../../tutorial/tests.rst:137
msgid "Factory"
msgstr "کارخانه"

#: ../../tutorial/tests.rst:139
msgid ""
"There's not much to test about the factory itself. Most of the code will be "
"executed for each test already, so if something fails the other tests will notice."
msgstr ""
"چیز زیادی برای آزمایش در مورد خود کارخانه وجود ندارد. بیشتر کدها برای هر تست قبلاً "
"اجرا می‌شوند، بنابراین اگر چیزی ناموفق باشد، تست‌های دیگر متوجه خواهند شد."

#: ../../tutorial/tests.rst:143
msgid ""
"The only behavior that can change is passing test config. If config is not passed, "
"there should be some default configuration, otherwise the configuration should be "
"overridden."
msgstr ""
"تنها رفتاری که می تواند تغییر کند گذراندن تنظیمات آزمایشی است. اگر پیکربندی تنظیم "
"نشد، باید تنظیمات پیش فرض وجود داشته باشد، در غیر این صورت پیکربندی باید لغو شود."

#: ../../tutorial/tests.rst:147
msgid "``tests/test_factory.py``"
msgstr "``tests/test_factory.py``"

#: ../../tutorial/tests.rst:162
msgid ""
"You added the ``hello`` route as an example when writing the factory at the "
"beginning of the tutorial. It returns \"Hello, World!\", so the test checks that "
"the response data matches."
msgstr ""
"هنگام نوشتن کارخانه در ابتدای آموزش مسیر ``hello`` را به عنوان مثال اضافه کردید. "
"«Hello, World!» را برمی‌گرداند، بنابراین آزمون بررسی می‌کند که داده‌های پاسخ مطابقت "
"دارند."

#: ../../tutorial/tests.rst:168
msgid "Database"
msgstr "پایگاه داده"

#: ../../tutorial/tests.rst:170
msgid ""
"Within an application context, ``get_db`` should return the same connection each "
"time it's called. After the context, the connection should be closed."
msgstr ""
"در یک زمینه برنامه،  ``get_db``  باید هر بار که تماس می‌گیرد همان اتصال را "
"برگرداند. پس از متن، اتصال باید بسته شود."

#: ../../tutorial/tests.rst:174 ../../tutorial/tests.rst:196
msgid "``tests/test_db.py``"
msgstr "``tests/test_db.py``"

#: ../../tutorial/tests.rst:193
msgid ""
"The ``init-db`` command should call the ``init_db`` function and output a message."
msgstr ""
"دستور ``init-db`` باید تابع ``init-db`` را فراخوانی کند و پیامی را ارسال کند."

#: ../../tutorial/tests.rst:211
msgid ""
"This test uses Pytest's ``monkeypatch`` fixture to replace the ``init_db`` "
"function with one that records that it's been called. The ``runner`` fixture you "
"wrote above is used to call the ``init-db`` command by name."
msgstr ""
"این تست از ابزار Pytest ``monkeypatch`` برای جایگزینی تابع ``init_db`` با تابعی "
"استفاده می‌کند که فراخوانی آن را ثبت می‌کند. فیکسچر ``runner`` که در بالا نوشتید "
"برای فراخوانی دستور ``init-db`` با نام استفاده می‌شود."

#: ../../tutorial/tests.rst:218
msgid "Authentication"
msgstr "احراز هویت"

#: ../../tutorial/tests.rst:220
msgid ""
"For most of the views, a user needs to be logged in. The easiest way to do this in "
"tests is to make a ``POST`` request to the ``login`` view with the client. Rather "
"than writing that out every time, you can write a class with methods to do that, "
"and use a fixture to pass it the client for each test."
msgstr ""
"برای اکثر بازدیدها، یک کاربر نیاز به ورود به سیستم دارد. ساده ترین راه برای انجام "
"این کار در تست ها این است که یک درخواست ``POST`` به نمای ``login``  با کلاینت "
"ارسال کنید. به جای اینکه هر بار آن را بنویسید، می‌توانید یک کلاس با روش‌هایی برای "
"انجام آن بنویسید و از یک ابزار برای پاس کردن آن به مشتری برای هر آزمون استفاده "
"کنید."

#: ../../tutorial/tests.rst:247
msgid ""
"With the ``auth`` fixture, you can call ``auth.login()`` in a test to log in as "
"the ``test`` user, which was inserted as part of the test data in the ``app`` "
"fixture."
msgstr ""
"با ابزار ``auth``، می توانید در یک آزمایش با ``auth.login()``  تماس بگیرید تا به "
"عنوان کاربر ``test``  وارد شوید، که به عنوان بخشی از داده های تست در ``app``  درج "
"شده است."

#: ../../tutorial/tests.rst:251
msgid ""
"The ``register`` view should render successfully on ``GET``. On ``POST`` with "
"valid form data, it should redirect to the login URL and the user's data should be "
"in the database. Invalid data should display error messages."
msgstr ""
"نمای ``register`` باید با موفقیت در ``GET`` ارائه شود. در ``POST`` با داده‌های فرم "
"معتبر، باید به URL ورود به سیستم هدایت شود و داده‌های کاربر باید در پایگاه داده "
"باشد. داده های نامعتبر باید پیام های خطا را نمایش دهند."

#: ../../tutorial/tests.rst:256 ../../tutorial/tests.rst:316
#: ../../tutorial/tests.rst:345
msgid "``tests/test_auth.py``"
msgstr "``tests/test_auth.py``"

#: ../../tutorial/tests.rst:289
msgid ""
":meth:`client.get() <werkzeug.test.Client.get>` makes a ``GET`` request and "
"returns the :class:`Response` object returned by Flask. Similarly, :meth:`client."
"post() <werkzeug.test.Client.post>` makes a ``POST`` request, converting the "
"``data`` dict into form data."
msgstr ""
":meth:`client.get() <werkzeug.test.Client.get>` یک درخواست ``GET`` می دهد و شی :"
"class:`Response` را که توسط فلاسک برگردانده شده است، برمی گرداند. به طور مشابه، :"
"meth:`client.post() <werkzeug.test.Client.post>` یک درخواست ``POST`` ایجاد می کند "
"و دیکت ``data`` را به داده فرم تبدیل می کند."

#: ../../tutorial/tests.rst:294
msgid ""
"To test that the page renders successfully, a simple request is made and checked "
"for a ``200 OK`` :attr:`~Response.status_code`. If rendering failed, Flask would "
"return a ``500 Internal Server Error`` code."
msgstr ""
"برای آزمایش اینکه صفحه با موفقیت رندر می‌شود، یک درخواست ساده ارسال می‌شود و :attr:"
"`~Response.status_code` بررسی می‌شود. اگر رندر انجام شد ``۲۰۰ خوبه`` و اگر انجام "
"نشد، فلاسک یک کد ``500 خطای داخلی سرور`` را برمی‌گرداند."

#: ../../tutorial/tests.rst:299
msgid ""
":attr:`~Response.headers` will have a ``Location`` header with the login URL when "
"the register view redirects to the login view."
msgstr ""
":attr:`~Response.headers` زمانی که نمای ثبت نام به نمای ورود به سیستم هدایت می "
"شود، سرصفحه ``Location`` با URL ورود به سیستم خواهد داشت."

#: ../../tutorial/tests.rst:302
msgid ""
":attr:`~Response.data` contains the body of the response as bytes. If you expect a "
"certain value to render on the page, check that it's in ``data``. Bytes must be "
"compared to bytes. If you want to compare text, use :meth:`get_data(as_text=True) "
"<werkzeug.wrappers.Response.get_data>` instead."
msgstr ""
":attr:`~Response.data` شامل بدنه پاسخ به صورت بایت است. اگر انتظار دارید مقدار "
"خاصی در صفحه نمایش داده شود،  بررسی کنید که در``data`` باشد. بایت ها باید با بایت "
"ها مقایسه شوند. اگر می خواهید متن را با هم مقایسه کنید، به جای آن از :meth:"
"`get_data(as_text=True) <werkzeug.wrappers.Response.get_data>` استفاده کنید."

#: ../../tutorial/tests.rst:308
msgid ""
"``pytest.mark.parametrize`` tells Pytest to run the same test function with "
"different arguments. You use it here to test different invalid input and error "
"messages without writing the same code three times."
msgstr ""
"``pytest.mark.parametrize`` به Pytest می گوید که همان تابع تست را با آرگومان های "
"مختلف اجرا کند. شما در اینجا از آن برای آزمایش ورودی های نامعتبر مختلف و پیام های "
"خطا بدون نوشتن یک کد سه بار استفاده می کنید."

#: ../../tutorial/tests.rst:312
msgid ""
"The tests for the ``login`` view are very similar to those for ``register``. "
"Rather than testing the data in the database, :data:`session` should have "
"``user_id`` set after logging in."
msgstr ""
"تست های نمای ``login``  بسیار شبیه به  ``register`` است. به جای آزمایش داده ها در "
"پایگاه داده، :data:`session` باید پس از ورود به سیستم، ``user_id`` را تنظیم کند."

#: ../../tutorial/tests.rst:338
msgid ""
"Using ``client`` in a ``with`` block allows accessing context variables such as :"
"data:`session` after the response is returned. Normally, accessing ``session`` "
"outside of a request would raise an error."
msgstr ""
"استفاده از ``client``  در بلوک ``with`` امکان دسترسی به متغیرهای زمینه مانند :data:"
"`session` را پس از بازگشت پاسخ فراهم می کند. به طور معمول، دسترسی به  ``session`` "
"در خارج از یک درخواست باعث بروز خطا می شود."

#: ../../tutorial/tests.rst:342
msgid ""
"Testing ``logout`` is the opposite of ``login``. :data:`session` should not "
"contain ``user_id`` after logging out."
msgstr ""
"آزمایش``logout``  برعکس ``login`` است. :data:`sesion` نباید پس از خروج از سیستم "
"حاوی ``user_id`` باشد."

#: ../../tutorial/tests.rst:357
msgid "Blog"
msgstr "بلاگ"

#: ../../tutorial/tests.rst:359
msgid ""
"All the blog views use the ``auth`` fixture you wrote earlier. Call ``auth."
"login()`` and subsequent requests from the client will be logged in as the "
"``test`` user."
msgstr ""
"همه نماهای وبلاگ از فیکسچر ``auth`` استفاده می کنند که قبلا نوشتید. ``auth."
"login()`` را فراخوانی کنید و درخواست‌های بعدی مشتری به‌عنوان کاربر ``test`` وارد "
"سیستم می‌شود."

#: ../../tutorial/tests.rst:363
msgid ""
"The ``index`` view should display information about the post that was added with "
"the test data. When logged in as the author, there should be a link to edit the "
"post."
msgstr ""
"نمای ``index`` باید اطلاعات مربوط به پستی را که با داده های آزمایشی اضافه شده است "
"نمایش دهد. هنگامی که به عنوان نویسنده وارد سیستم شوید، باید پیوندی برای ویرایش پست "
"وجود داشته باشد."

#: ../../tutorial/tests.rst:367
msgid ""
"You can also test some more authentication behavior while testing the ``index`` "
"view. When not logged in, each page shows links to log in or register. When logged "
"in, there's a link to log out."
msgstr ""
"همچنین می‌توانید برخی از رفتارهای احراز هویت را در حین آزمایش نمای ``index`` آزمایش "
"کنید. هنگامی که وارد سیستم نمی شوید، هر صفحه پیوندهایی برای ورود یا ثبت نام نشان "
"می دهد. هنگام ورود به سیستم، پیوندی برای خروج وجود دارد."

#: ../../tutorial/tests.rst:371 ../../tutorial/tests.rst:397
#: ../../tutorial/tests.rst:439 ../../tutorial/tests.rst:476
msgid "``tests/test_blog.py``"
msgstr "``tests/test_blog.py``"

#: ../../tutorial/tests.rst:391
msgid ""
"A user must be logged in to access the ``create``, ``update``, and ``delete`` "
"views. The logged in user must be the author of the post to access ``update`` and "
"``delete``, otherwise a ``403 Forbidden`` status is returned. If a ``post`` with "
"the given ``id`` doesn't exist, ``update`` and ``delete`` should return ``404 Not "
"Found``."
msgstr ""
"یک کاربر برای دسترسی به نماهای ``create`` ، ``update`` و ``delete`` باید وارد "
"سیستم شود. کاربر وارد شده باید نویسنده پست باشد تا به ``update`` و ``delete`` "
"دسترسی پیدا کند، در غیر این صورت وضعیت ``۴۰۴ ممنوعه`` برگردانده می‌شود. اگر "
"``post`` با ``id`` داده شده وجود نداشته باشد، ``update`` و ``delete`` باید ``۴۰۴ "
"یافت نشد`` را برگردانند."

#: ../../tutorial/tests.rst:433
msgid ""
"The ``create`` and ``update`` views should render and return a ``200 OK`` status "
"for a ``GET`` request. When valid data is sent in a ``POST`` request, ``create`` "
"should insert the new post data into the database, and ``update`` should modify "
"the existing data. Both pages should show an error message on invalid data."
msgstr ""
"نماهای ``create`` و ``update`` باید وضعیت ``۲۰۰ خوبه`` را برای درخواست ``GET`` "
"ارائه کرده و برگردانند. وقتی داده‌های معتبر در یک درخواست ``POST`` ارسال می‌شود، "
"``create`` باید داده‌های پست جدید را در پایگاه داده وارد کند و ``update`` باید "
"داده‌های موجود را تغییر دهد. هر دو صفحه باید یک پیام خطا در مورد داده های نامعتبر "
"نشان دهند."

#: ../../tutorial/tests.rst:473
msgid ""
"The ``delete`` view should redirect to the index URL and the post should no longer "
"exist in the database."
msgstr ""
"نمای ``delete`` باید به URL فهرست هدایت شود و پست دیگر در پایگاه داده وجود نداشته "
"باشد."

#: ../../tutorial/tests.rst:491
msgid "Running the Tests"
msgstr "اجرای تست ها"

#: ../../tutorial/tests.rst:493
msgid ""
"Some extra configuration, which is not required but makes running tests with "
"coverage less verbose, can be added to the project's ``setup.cfg`` file."
msgstr ""
"برخی از پیکربندی‌های اضافی، که مورد نیاز نیست، اما باعث می‌شود آزمایش‌های در حال اجرا "
"با پوشش کمتر پرمخاطب باشند، می‌توانند به فایل ``setup.cfg`` پروژه اضافه شوند."

#: ../../tutorial/tests.rst:497
msgid "``setup.cfg``"
msgstr "``setup.cfg``"

#: ../../tutorial/tests.rst:508
msgid ""
"To run the tests, use the ``pytest`` command. It will find and run all the test "
"functions you've written."
msgstr ""
"برای اجرای تست ها از دستور ``pytest`` استفاده کنید. تمام توابع تستی که نوشته اید "
"را پیدا کرده و اجرا می کند."

#: ../../tutorial/tests.rst:527
msgid ""
"If any tests fail, pytest will show the error that was raised. You can run "
"``pytest -v`` to get a list of each test function rather than dots."
msgstr ""
"اگر هر آزمایشی با شکست مواجه شود، pytest خطای ایجاد شده را نشان می دهد. شما می "
"توانید ``pytest -v`` را اجرا کنید تا لیستی از هر تابع تست به جای نقطه دریافت کنید."

#: ../../tutorial/tests.rst:530
msgid ""
"To measure the code coverage of your tests, use the ``coverage`` command to run "
"pytest instead of running it directly."
msgstr ""
"برای اندازه‌گیری پوشش کد تست‌های خود، از دستور  ``coverage`` برای اجرای pytest به "
"جای اجرای مستقیم آن استفاده کنید."

#: ../../tutorial/tests.rst:537
msgid "You can either view a simple coverage report in the terminal:"
msgstr "می توانید یک گزارش پوشش ساده را در ترمینال مشاهده کنید:"

#: ../../tutorial/tests.rst:552
msgid "An HTML report allows you to see which lines were covered in each file:"
msgstr ""
"گزارش HTML به شما اجازه می دهد تا ببینید که کدام خطوط در هر فایل پوشش داده شده است:"

#: ../../tutorial/tests.rst:558
msgid ""
"This generates files in the ``htmlcov`` directory. Open ``htmlcov/index.html`` in "
"your browser to see the report."
msgstr ""
"این فایل ها را در دایرکتوری ``htmlcov`` تولید می کند. ``htmlcov/index.html`` را در "
"مرورگر خود باز کنید تا گزارش را ببینید."

#: ../../tutorial/tests.rst:561
msgid "Continue to :doc:`deploy`."
msgstr "با :doc:`deploy` ادامه دهید."
