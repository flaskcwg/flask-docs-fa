# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-16 15:03+0330\n"
"PO-Revision-Date: 2021-12-13 16:08+0330\n"
"Last-Translator: Komeil Parseh  <ahmdparsh129@gmail.com>\n"
"Language: fa\n"
"Language-Team: fa <ahmdparsh129@gmail.com>\n"
"Plural-Forms: nplurals=2; plural=(n==0 || n==1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorial/factory.rst:4
msgid "Application Setup"
msgstr "راه اندازی برنامه"

#: ../../tutorial/factory.rst:6
msgid ""
"A Flask application is an instance of the :class:`Flask` class. "
"Everything about the application, such as configuration and URLs, will be"
" registered with this class."
msgstr ""
"یک برنامه فلاسک نمونه ای از کلاس :class:`Flask` است. همه چیز در مورد "
"برنامه، مانند پیکربندی و URLها، در این کلاس ثبت می شود."

#: ../../tutorial/factory.rst:10
msgid ""
"The most straightforward way to create a Flask application is to create a"
" global :class:`Flask` instance directly at the top of your code, like "
"how the \"Hello, World!\" example did on the previous page. While this is"
" simple and useful in some cases, it can cause some tricky issues as the "
"project grows."
msgstr ""
"ساده ترین راه برای ایجاد یک برنامه فلاسک این است که یک نمونه سراسری "
":class:`Flask`  را مستقیماً در بالای کد خود ایجاد کنید، مانند \"Hello, "
"World!\" که در صفحه قبل انجام شد. در حالی که این کار در برخی موارد ساده و"
" مفید است، اما می‌تواند با رشد پروژه باعث ایجاد مشکلاتی شود."

#: ../../tutorial/factory.rst:16
msgid ""
"Instead of creating a :class:`Flask` instance globally, you will create "
"it inside a function. This function is known as the *application "
"factory*. Any configuration, registration, and other setup the "
"application needs will happen inside the function, then the application "
"will be returned."
msgstr ""
"به جای ایجاد یک نمونه  :class:`Flask` به صورت سراسری، آن را در داخل یک "
"تابع ایجاد خواهید کرد. این تابع با نام *کارخانه برنامه* شناخته می شود. هر"
" گونه پیکربندی، ثبت نام و سایر تنظیمات مورد نیاز برنامه در داخل تابع "
"اتفاق می افتد، سپس برنامه برگردانده می شود."

#: ../../tutorial/factory.rst:24
msgid "The Application Factory"
msgstr "کارخانه برنامه"

#: ../../tutorial/factory.rst:26
msgid ""
"It's time to start coding! Create the ``flaskr`` directory and add the "
"``__init__.py`` file. The ``__init__.py`` serves double duty: it will "
"contain the application factory, and it tells Python that the ``flaskr`` "
"directory should be treated as a package."
msgstr ""
"زمان شروع کدنویسی است! دایرکتوری ``flaskr`` را ایجاد کنید و فایل "
"``__init__.py`` را اضافه کنید. ``__init__.py`` وظیفه دوگانه ای را انجام "
"می دهد: شامل کارخانه برنامه است و به پایتون می گوید که دایرکتوری "
"``flaskr`` باید به عنوان یک بسته در نظر گرفته شود."

#: ../../tutorial/factory.rst:35
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/factory.rst:71
msgid ""
"``create_app`` is the application factory function. You'll add to it "
"later in the tutorial, but it already does a lot."
msgstr ""
"``create_app`` تابع کارخانه برنامه است. بعداً در آموزش به آن اضافه خواهید"
" کرد، اما کارهای زیادی انجام می دهد."

#: ../../tutorial/factory.rst:74
msgid ""
"``app = Flask(__name__, instance_relative_config=True)`` creates the "
":class:`Flask` instance."
msgstr ""
"``app = Flask(__name__, instance_relative_config=True)`` نمونه "
":class:`Flask` را ایجاد می کند."

#: ../../tutorial/factory.rst:77
msgid ""
"``__name__`` is the name of the current Python module. The app needs to "
"know where it's located to set up some paths, and ``__name__`` is a "
"convenient way to tell it that."
msgstr ""
"``__name__`` نام ماژول فعلی پایتون است. برنامه برای راه‌اندازی برخی "
"مسیرها باید بداند در کجا قرار دارد، و ``__name__`` راهی مناسب برای گفتن "
"آن است."

#: ../../tutorial/factory.rst:81
msgid ""
"``instance_relative_config=True`` tells the app that configuration files "
"are relative to the :ref:`instance folder <instance-folders>`. The "
"instance folder is located outside the ``flaskr`` package and can hold "
"local data that shouldn't be committed to version control, such as "
"configuration secrets and the database file."
msgstr ""
"``instance_relative_config=True`` به برنامه می‌گوید که فایل‌های پیکربندی "
"مربوط به پوشه :ref:`پوشه نمونه <instance-folders>` هستند. پوشه نمونه خارج"
" از بسته ``flaskr`` قرار دارد و می‌تواند داده‌های محلی را که نباید به "
"کنترل نسخه متعهد شوند، مانند اسرار پیکربندی و فایل پایگاه داده، در خود "
"جای دهد."

#: ../../tutorial/factory.rst:88
msgid ""
":meth:`app.config.from_mapping() <Config.from_mapping>` sets some default"
" configuration that the app will use:"
msgstr ""
":meth:`app.config.from_mapping() <Config.from_mapping>` برخی از تنظیمات "
"پیش فرض را تنظیم می کند که برنامه از آنها استفاده خواهد کرد: "

#: ../../tutorial/factory.rst:91
msgid ""
":data:`SECRET_KEY` is used by Flask and extensions to keep data safe. "
"It's set to ``'dev'`` to provide a convenient value during development, "
"but it should be overridden with a random value when deploying."
msgstr ""
":data:`SECRET_KEY` توسط فلاسک و برنامه های افزودنی برای ایمن نگه داشتن "
"داده ها استفاده می شود. برای ارائه یک مقدار مناسب در طول توسعه، روی "
"``'dev'`` تنظیم شده است، اما هنگام استقرار باید با یک مقدار تصادفی "
"جایگزین شود."

#: ../../tutorial/factory.rst:96
msgid ""
"``DATABASE`` is the path where the SQLite database file will be saved. "
"It's under :attr:`app.instance_path <Flask.instance_path>`, which is the "
"path that Flask has chosen for the instance folder. You'll learn more "
"about the database in the next section."
msgstr ""
"``DATABASE`` مسیری است که فایل پایگاه داده SQLite در آن ذخیره می شود. این"
" تحت :attr:`app.instance_path <Flask.instance_path>` است، که مسیری است که"
" فلاسک برای پوشه نمونه انتخاب کرده است. در بخش بعدی اطلاعات بیشتری در "
"مورد پایگاه داده خواهید آموخت."

#: ../../tutorial/factory.rst:102
msgid ""
":meth:`app.config.from_pyfile() <Config.from_pyfile>` overrides the "
"default configuration with values taken from the ``config.py`` file in "
"the instance folder if it exists. For example, when deploying, this can "
"be used to set a real ``SECRET_KEY``."
msgstr ""
":meth:`app.config.from_pyfile() <Config.from_pyfile>` پیکربندی پیش فرض را"
" با مقادیر گرفته شده از فایل ``config.py`` در پوشه نمونه در صورت وجود لغو"
" می کند. به عنوان مثال، هنگام استقرار، می توان از این برای تنظیم یک "
"``SECRET_KEY`` واقعی استفاده کرد."

#: ../../tutorial/factory.rst:107
msgid ""
"``test_config`` can also be passed to the factory, and will be used "
"instead of the instance configuration. This is so the tests you'll write "
"later in the tutorial can be configured independently of any development "
"values you have configured."
msgstr ""
"``test_config`` همچنین می تواند به کارخانه منتقل شود و به جای پیکربندی "
"نمونه استفاده می شود. به این ترتیب تست هایی که بعداً در آموزش می نویسید "
"می توانند مستقل از هر مقدار توسعه ای که پیکربندی کرده اید پیکربندی شوند."

#: ../../tutorial/factory.rst:112
msgid ""
":func:`os.makedirs` ensures that :attr:`app.instance_path "
"<Flask.instance_path>` exists. Flask doesn't create the instance folder "
"automatically, but it needs to be created because your project will "
"create the SQLite database file there."
msgstr ""
":func:`os.makedirs` اطمینان حاصل می کند که :attr:`app.instance_path "
"<Flask.instance_path>` وجود دارد. فلاسک پوشه نمونه را به طور خودکار ایجاد"
" نمی کند، اما باید ایجاد شود زیرا پروژه شما فایل پایگاه داده SQLite را در"
" آنجا ایجاد می کند."

#: ../../tutorial/factory.rst:118
msgid ""
":meth:`@app.route() <Flask.route>` creates a simple route so you can see "
"the application working before getting into the rest of the tutorial. It "
"creates a connection between the URL ``/hello`` and a function that "
"returns a response, the string ``'Hello, World!'`` in this case."
msgstr ""
":meth:`@app.route() <Flask.route>` یک مسیر ساده ایجاد می کند تا بتوانید "
"قبل از ورود به ادامه آموزش، عملکرد برنامه را ببینید. این یک ارتباط بین  "
"``/hello`` و تابعی ایجاد می کند که یک پاسخ، در اینجا رشته ``'Hello, "
"World!'`` را ایجاد می کند."

#: ../../tutorial/factory.rst:126
msgid "Run The Application"
msgstr "اجرای برنامه"

#: ../../tutorial/factory.rst:128
msgid ""
"Now you can run your application using the ``flask`` command. From the "
"terminal, tell Flask where to find your application, then run it in "
"development mode. Remember, you should still be in the top-level ``flask-"
"tutorial`` directory, not the ``flaskr`` package."
msgstr ""
"اکنون می توانید برنامه خود را با استفاده از دستور ``flask`` اجرا کنید. از"
" ترمینال، به فلاسک بگویید برنامه شما را کجا پیدا کند، سپس آن را در حالت "
"توسعه اجرا کنید. به یاد داشته باشید، شما همچنان باید در دایرکتوری سطح "
"بالا  ``flask-tutorial`` باشید، نه در پکیج ``flaskr``."

#: ../../tutorial/factory.rst:133
msgid ""
"Development mode shows an interactive debugger whenever a page raises an "
"exception, and restarts the server whenever you make changes to the code."
" You can leave it running and just reload the browser page as you follow "
"the tutorial."
msgstr ""
"حالت توسعه هر زمان که یک صفحه استثنایی ایجاد کند، یک دیباگر را نشان "
"می‌دهد و هر زمان که تغییراتی در کد ایجاد می‌کنید، سرور را دوباره "
"راه‌اندازی می‌کند. می‌توانید آن را در حال اجرا رها کنید و فقط با دنبال "
"کردن آموزش، صفحه مرورگر را دوباره بارگذاری کنید."

#: ../../tutorial/factory.rst:140
msgid "Bash"
msgstr "Bash"

#: ../../tutorial/factory.rst:148
msgid "Fish"
msgstr "Fish"

#: ../../tutorial/factory.rst:156
msgid "CMD"
msgstr "CMD"

#: ../../tutorial/factory.rst:164
msgid "Powershell"
msgstr "Powershell"

#: ../../tutorial/factory.rst:172
msgid "You'll see output similar to this:"
msgstr "خروجی مشابه این را خواهید دید:"

#: ../../tutorial/factory.rst:184
msgid ""
"Visit http://127.0.0.1:5000/hello in a browser and you should see the "
"\"Hello, World!\" message. Congratulations, you're now running your Flask"
" web application!"
msgstr ""
"در یک مرورگر به http://127.0.0.1:5000/hello مراجعه کنید و باید پیام "
"\"Hello, World!\" را ببنید. تبریک! شما الان برنامه فلاسکتان را اجرا "
"میکنید!"

#: ../../tutorial/factory.rst:188
msgid ""
"If another program is already using port 5000, you'll see ``OSError: "
"[Errno 98]`` or ``OSError: [WinError 10013]`` when the server tries to "
"start. See :ref:`address-already-in-use` for how to handle that."
msgstr ""
"اگر برنامه دیگری در حال حاضر از پورت 5000 استفاده می کند، زمانی که سرور "
"تلاش می کند راه اندازی شود،``OSError: [WinError 10013]`` یا ``OSError: "
"[Errno 98]`` را مشاهده خواهید کرد. برای نحوه رسیدگی به آن به :ref"
":`address-already-in-use` مراجعه کنید."

#: ../../tutorial/factory.rst:193
msgid "Continue to :doc:`database`."
msgstr "با :doc:`database` ادامه دهید."
