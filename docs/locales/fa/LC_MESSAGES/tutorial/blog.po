# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-08 08:56+0330\n"
"PO-Revision-Date: 2021-12-30 19:31+0330\n"
"Language-Team: fa <ahmdparsh129@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n==0 || n==1);\n"
"Last-Translator:  Komeil Parseh  <ahmdparsh129@gmail.com>\n"
"Language: fa\n"
"X-Generator: Poedit 3.0\n"

#: ../../tutorial/blog.rst:4
msgid "Blog Blueprint"
msgstr "طرح بلاگ"

#: ../../tutorial/blog.rst:6
msgid ""
"You'll use the same techniques you learned about when writing the "
"authentication blueprint to write the blog blueprint. The blog should "
"list all posts, allow logged in users to create posts, and allow the "
"author of a post to edit or delete it."
msgstr ""
"شما از همان تکنیک هایی که هنگام نوشتن طرح احراز هویت یاد گرفتید برای "
"نوشتن طرح اولیه وبلاگ استفاده خواهید کرد. وبلاگ باید همه پست ها را فهرست "
"کند، به کاربرانی که وارد سیستم شده اند اجازه ایجاد پست ها را بدهد و به "
"نویسنده یک پست اجازه دهد آن را ویرایش یا حذف کند."

#: ../../tutorial/blog.rst:11
msgid ""
"As you implement each view, keep the development server running. As you "
"save your changes, try going to the URL in your browser and testing them "
"out."
msgstr ""
"همانطور که هر نما را پیاده سازی می کنید، سرور توسعه را در حال اجرا نگه "
"دارید. همانطور که تغییرات خود را ذخیره می کنید، سعی کنید به URL موجود در "
"مرورگر خود بروید و آنها را آزمایش کنید."

#: ../../tutorial/blog.rst:16
msgid "The Blueprint"
msgstr "طرح"

#: ../../tutorial/blog.rst:18
msgid "Define the blueprint and register it in the application factory."
msgstr "طرح اولیه را تعریف کرده و در کارخانه اپلیکیشن ثبت کنید."

#: ../../tutorial/blog.rst:20 ../../tutorial/blog.rst:76
#: ../../tutorial/blog.rst:142 ../../tutorial/blog.rst:198
#: ../../tutorial/blog.rst:228 ../../tutorial/blog.rst:320
msgid "``flaskr/blog.py``"
msgstr "``flaskr/blog.py``"

#: ../../tutorial/blog.rst:33
msgid ""
"Import and register the blueprint from the factory using :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Place the new code at "
"the end of the factory function before returning the app."
msgstr ""
"با استفاده از :meth:`app.register_blueprint() <Flask."
"register_blueprint>` طرح اولیه را از کارخانه وارد و ثبت کنید. قبل از "
"بازگرداندن برنامه، کد جدید را در انتهای عملکرد کارخانه قرار دهید."

#: ../../tutorial/blog.rst:37
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/blog.rst:51
msgid ""
"Unlike the auth blueprint, the blog blueprint does not have a "
"``url_prefix``. So the ``index`` view will be at ``/``, the ``create`` "
"view at ``/create``, and so on. The blog is the main feature of Flaskr, "
"so it makes sense that the blog index will be the main index."
msgstr ""
"بر خلاف طرح auth، طرح اولیه وبلاگ ``url_prefix`` ندارد. بنابراین نمای "
"``index`` در ``/`` ، نمای ``create`` در ``/create`` و سایر موارد با نام "
"خودشان خواهد بود. وبلاگ ویژگی اصلی Flaskr است، بنابراین منطقی است که "
"نمایه وبلاگ شاخص اصلی باشد."

#: ../../tutorial/blog.rst:56
msgid ""
"However, the endpoint for the ``index`` view defined below will be "
"``blog.index``. Some of the authentication views referred to a plain "
"``index`` endpoint. :meth:`app.add_url_rule() <Flask.add_url_rule>` "
"associates the endpoint name ``'index'`` with the ``/`` url so that "
"``url_for('index')`` or ``url_for('blog.index')`` will both work, "
"generating the same ``/`` URL either way."
msgstr ""
"با این حال، نقطه پایانی برای نمای ``index`` که در زیر تعریف شده است، "
"``blog.index`` خواهد بود. برخی از نماهای احراز هویت به یک نقطه پایانی "
"ساده ``index`` اشاره می‌کنند. :meth:`app.add_url_rule() <Flask."
"add_url_rule>` نام نقطه پایانی ``'index'`` را با نشانی اینترنتی ``/`` "
"مرتبط می کند به طوری که ``url_for('index')`` یا ``url_for ('blog."
"index')`` هر دو کار خواهند کرد و در هر صورت یک URL ``/`` ایجاد می شود."

#: ../../tutorial/blog.rst:63
msgid ""
"In another application you might give the blog blueprint a "
"``url_prefix`` and define a separate ``index`` view in the application "
"factory, similar to the ``hello`` view. Then the ``index`` and ``blog."
"index`` endpoints and URLs would be different."
msgstr ""
"در برنامه دیگری، می‌توانید به وبلاگ یک ``url_prefix`` بدهید و یک نمای "
"``index`` جداگانه در کارخانه برنامه، شبیه به نمای ``hello`` تعریف کنید. "
"سپس نقاط پایانی و URL های ``index`` و ``blog.index`` متفاوت خواهند بود."

#: ../../tutorial/blog.rst:70
msgid "Index"
msgstr "فهرست(Index)"

#: ../../tutorial/blog.rst:72
msgid ""
"The index will show all of the posts, most recent first. A ``JOIN`` is "
"used so that the author information from the ``user`` table is available "
"in the result."
msgstr ""
"فهرست همه پست‌ها به ترتیب تاریخ را نشان می‌دهد. از یک``JOIN``  استفاده می "
"شود تا اطلاعات نویسنده از جدول ``user`` در نتیجه موجود باشد."

#: ../../tutorial/blog.rst:89
msgid "``flaskr/templates/blog/index.html``"
msgstr "``flaskr/templates/blog/index.html``"

#: ../../tutorial/blog.rst:121
msgid ""
"When a user is logged in, the ``header`` block adds a link to the "
"``create`` view. When the user is the author of a post, they'll see an "
"\"Edit\" link to the ``update`` view for that post. ``loop.last`` is a "
"special variable available inside `Jinja for loops`_. It's used to "
"display a line after each post except the last one, to visually separate "
"them."
msgstr ""
"هنگامی که یک کاربر وارد سیستم می شود، بلوک ``header`` پیوندی را به نمای "
"``create`` اضافه می کند. وقتی کاربر نویسنده یک پست باشد، پیوند «ویرایش» "
"به نمای «به روز رسانی» برای آن پست را می بیند. ``loop.last`` یک متغیر "
"ویژه است که در `Jinja for loops`_ موجود است. برای نمایش یک خط بعد از هر "
"پست به جز آخرین پست، برای جداسازی بصری آنها استفاده می شود."

#: ../../tutorial/blog.rst:132
msgid "Create"
msgstr "ایجاد(Create)"

#: ../../tutorial/blog.rst:134
msgid ""
"The ``create`` view works the same as the auth ``register`` view. Either "
"the form is displayed, or the posted data is validated and the post is "
"added to the database or an error is shown."
msgstr ""
"نمای ``create`` مانند نمای تأیید اعتبار ``register``  عمل می کند. یا فرم "
"نمایش داده می شود یا داده های ارسال شده اعتبارسنجی می شود و پست به "
"پایگاه داده اضافه می شود یا خطا نشان داده می شود."

#: ../../tutorial/blog.rst:138
msgid ""
"The ``login_required`` decorator you wrote earlier is used on the blog "
"views. A user must be logged in to visit these views, otherwise they "
"will be redirected to the login page."
msgstr ""
"دکوراتور ``login_required`` که قبلا نوشتید در نماهای وبلاگ استفاده می "
"شود. یک کاربر برای بازدید از این نماها باید وارد سیستم شود، در غیر این "
"صورت به صفحه ورود هدایت می شوند."

#: ../../tutorial/blog.rst:170
msgid "``flaskr/templates/blog/create.html``"
msgstr "``flaskr/templates/blog/create.html``"

#: ../../tutorial/blog.rst:191
msgid "Update"
msgstr "بروزرسانی"

#: ../../tutorial/blog.rst:193
msgid ""
"Both the ``update`` and ``delete`` views will need to fetch a ``post`` "
"by ``id`` and check if the author matches the logged in user. To avoid "
"duplicating code, you can write a function to get the ``post`` and call "
"it from each view."
msgstr ""
"هر دو نمای ``update`` و ``delete`` باید ``post`` را توسط ``id`` واکشی و "
"بررسی کنند که آیا نویسنده با کاربر وارد شده مطابقت دارد یا خیر. برای "
"جلوگیری از تکرار کد، می‌توانید تابعی بنویسید تا ``post`` را دریافت کند و "
"آن را از هر نما فراخوانی کند."

#: ../../tutorial/blog.rst:217
msgid ""
":func:`abort` will raise a special exception that returns an HTTP status "
"code. It takes an optional message to show with the error, otherwise a "
"default message is used. ``404`` means \"Not Found\", and ``403`` means "
"\"Forbidden\". (``401`` means \"Unauthorized\", but you redirect to the "
"login page instead of returning that status.)"
msgstr ""
"تابع :func:`abort` یک استثنای خاص ایجاد می کند که یک کد وضعیت HTTP را "
"برمی گرداند. یک پیام اختیاری طول می کشد تا با خطا نشان داده شود، در غیر "
"این صورت یک پیام پیش فرض استفاده می شود. ``۴۰۴`` به معنای «یافت نشد» و "
"``۴۰۳`` به معنای «ممنوع» است. (``۴۰۱`` به معنای «غیرمجاز» است، اما شما "
"به جای بازگرداندن آن وضعیت، به صفحه ورود هدایت می شوید.)"

#: ../../tutorial/blog.rst:223
msgid ""
"The ``check_author`` argument is defined so that the function can be "
"used to get a ``post`` without checking the author. This would be useful "
"if you wrote a view to show an individual post on a page, where the user "
"doesn't matter because they're not modifying the post."
msgstr ""
"آرگومان ``check_author`` به گونه ای تعریف شده است که می توان از این تابع "
"برای دریافت ``post`` بدون بررسی نویسنده استفاده کرد. اگر یک نما بنویسید "
"تا یک پست را در یک صفحه نشان دهید، جایی که کاربر اهمیتی ندارد زیرا پست "
"را تغییر نمی دهد."

#: ../../tutorial/blog.rst:258
msgid ""
"Unlike the views you've written so far, the ``update`` function takes an "
"argument, ``id``. That corresponds to the ``<int:id>`` in the route. A "
"real URL will look like ``/1/update``. Flask will capture the ``1``, "
"ensure it's an :class:`int`, and pass it as the ``id`` argument. If you "
"don't specify ``int:`` and instead do ``<id>``, it will be a string. To "
"generate a URL to the update page, :func:`url_for` needs to be passed "
"the ``id`` so it knows what to fill in: ``url_for('blog.update', "
"id=post['id'])``. This is also in the ``index.html`` file above."
msgstr ""
"برخلاف نماهایی که تاکنون نوشته‌اید، تابع ``update`` آرگومان , ``id`` را "
"می‌گیرد. که با ``<int:id>`` در مسیر مطابقت دارد. یک نشانی وب واقعی شبیه "
"``/1/update`` خواهد بود. فلاسک ``1`` را می گیرد، مطمئن می شود که یک :"
"class:`int` است و آن را به عنوان آرگومان ``id`` ارسال می کند. اگر ``int:"
"`` را مشخص نکنید و به جای آن ``<id>`` را انجام دهید، یک رشته خواهد بود. "
"برای ایجاد یک URL به صفحه به‌روزرسانی، :func:`url_for` باید از ``id`` "
"عبور داده شود تا بداند چه چیزی را باید پر کند ``url_for('blog.update', "
"id=post['id'])`` . این نیز در فایل ``index.html`` در بالا موجود است."

#: ../../tutorial/blog.rst:268
msgid ""
"The ``create`` and ``update`` views look very similar. The main "
"difference is that the ``update`` view uses a ``post`` object and an "
"``UPDATE`` query instead of an ``INSERT``. With some clever refactoring, "
"you could use one view and template for both actions, but for the "
"tutorial it's clearer to keep them separate."
msgstr ""
"نمای ``create`` و ``update`` بسیار شبیه به هم هستند. تفاوت اصلی این است "
"که نمای ``update`` از یک شی ``post`` و یک کوئری ``UPDATE`` به جای "
"``INSERT`` استفاده می کند. با مقداری refactoring هوشمندانه، می توانید از "
"یک نما و الگو برای هر دو عملکرد استفاده کنید، اما برای آموزش، جدا نگه "
"داشتن آنها واضح تر است."

#: ../../tutorial/blog.rst:274
msgid "``flaskr/templates/blog/update.html``"
msgstr "``flaskr/templates/blog/update.html``"

#: ../../tutorial/blog.rst:298
msgid ""
"This template has two forms. The first posts the edited data to the "
"current page (``/<id>/update``). The other form contains only a button "
"and specifies an ``action`` attribute that posts to the delete view "
"instead. The button uses some JavaScript to show a confirmation dialog "
"before submitting."
msgstr ""
"این قالب دو فرم دارد. اولین مورد داده های ویرایش شده را به صفحه فعلی پست "
"می کند (``/<id>/update``). فرم دیگر فقط حاوی یک دکمه است و یک ویژگی "
"``عملی`` را مشخص می کند که به جای آن در نمای حذف پست می شود. این دکمه از "
"مقداری جاوا اسکریپت برای نشان دادن گفتگوی تأیید قبل از ارسال استفاده می "
"کند."

#: ../../tutorial/blog.rst:304
msgid ""
"The pattern ``{{ request.form['title'] or post['title'] }}`` is used to "
"choose what data appears in the form. When the form hasn't been "
"submitted, the original ``post`` data appears, but if invalid form data "
"was posted you want to display that so the user can fix the error, so "
"``request.form`` is used instead. :data:`request` is another variable "
"that's automatically available in templates."
msgstr ""
"الگوی ``{{ request.form['title'] or post['title'] }}`` برای انتخاب "
"داده‌هایی که در فرم نشان داده می‌شوند استفاده می‌شود. هنگامی که فرم ارسال "
"نشده است، داده‌های ``post`` اصلی ظاهر می‌شود، اما اگر داده‌های فرم نامعتبر "
"پست شده باشد، می‌خواهید آن را نمایش دهید تا کاربر بتواند خطا را برطرف "
"کند، بنابراین ``request.form`` به جای آن استفاده می‌شود. :data:`request` "
"متغیر دیگری است که به صورت خودکار در قالب ها موجود است."

#: ../../tutorial/blog.rst:313
msgid "Delete"
msgstr "حذف"

#: ../../tutorial/blog.rst:315
msgid ""
"The delete view doesn't have its own template, the delete button is part "
"of ``update.html`` and posts to the ``/<id>/delete`` URL. Since there is "
"no template, it will only handle the ``POST`` method and then redirect "
"to the ``index`` view."
msgstr ""
"نمای حذف الگوی خود را ندارد، دکمه حذف بخشی از  ``update.html``  است و به "
"نشانی اینترنتی ``/<id>/delete`` پست می‌شود. از آنجایی که هیچ الگوی وجود "
"ندارد، فقط روش  ``POST`` را مدیریت می‌کند و سپس به نمای «نمایه» هدایت "
"می‌شود."

#: ../../tutorial/blog.rst:332
msgid ""
"Congratulations, you've now finished writing your application! Take some "
"time to try out everything in the browser. However, there's still more "
"to do before the project is complete."
msgstr ""
"تبریک می گویم، شما اکنون نوشتن درخواست خود را به پایان رسانده اید! کمی "
"وقت بگذارید و همه چیز را در مرورگر امتحان کنید. با این حال، هنوز کارهای "
"بیشتری قبل از تکمیل پروژه وجود دارد."

#: ../../tutorial/blog.rst:336
msgid "Continue to :doc:`install`."
msgstr "با :doc:`install` ادامه دهید."
