# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-08 08:56+0330\n"
"PO-Revision-Date: 2022-03-09 22:07+0330\n"
"Last-Translator: Komeil Parseh <ahmdparsh129@gmail.com>\n"
"Language-Team: fa <ahmdparsh129@gmail.com>\n"
"Language: fa\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n==0 || n==1);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../patterns/urlprocessors.rst:2
msgid "Using URL Processors"
msgstr "استفاده از پردازشگرهای URL"

#: ../../patterns/urlprocessors.rst:6
msgid ""
"Flask 0.7 introduces the concept of URL processors.  The idea is that "
"you might have a bunch of resources with common parts in the URL that "
"you don't always explicitly want to provide.  For instance you might "
"have a bunch of URLs that have the language code in it but you don't "
"want to have to handle it in every single function yourself."
msgstr ""
"فلاسک ۰.۷ مفهوم پردازنده های URL را ارائه داد. ایده این است که شما ممکن "
"است تعداد زیادی منابع با بخش های مشترک در URL داشته باشید که همیشه نمی "
"خواهید به طور صریح ارائه دهید. به عنوان مثال، ممکن است تعدادی URL داشته "
"باشید که کد زبان را در خود دارند، اما نمی‌خواهید خودتان آن را در هر تابعی "
"مدیریت کنید."

#: ../../patterns/urlprocessors.rst:12
msgid ""
"URL processors are especially helpful when combined with blueprints.  We "
"will handle both application specific URL processors here as well as "
"blueprint specifics."
msgstr ""
"پردازشگرهای URL به ویژه هنگامی که با طرح های اولیه ترکیب می شوند مفید "
"هستند. ما در اینجا هر دو پردازشگر URL ویژه برنامه و همچنین جزئیات طرح را "
"بررسی خواهیم کرد."

#: ../../patterns/urlprocessors.rst:17
msgid "Internationalized Application URLs"
msgstr "URL های برنامه بین المللی شده"

#: ../../patterns/urlprocessors.rst:19
msgid "Consider an application like this::"
msgstr "برنامه ای مانند این را در نظر بگیرید::"

#: ../../patterns/urlprocessors.rst:35
msgid ""
"This is an awful lot of repetition as you have to handle the language "
"code setting on the :data:`~flask.g` object yourself in every single "
"function. Sure, a decorator could be used to simplify this, but if you "
"want to generate URLs from one function to another you would have to "
"still provide the language code explicitly which can be annoying."
msgstr ""
"این یک تکرار بسیار ناخوش‌آیند است زیرا باید تنظیمات کد زبان را در شیء :"
"data:`~flask.g` در هر تابع تکی مدیریت کنید. مطمئناً، می‌توان از دکوراتور "
"برای ساده‌سازی این کار استفاده کرد، اما اگر می‌خواهید URL از یک تابع به "
"تابع دیگر تولید کنید، باید همچنان کد زبان را به صراحت ارائه دهید که "
"می‌تواند آزاردهنده باشد."

#: ../../patterns/urlprocessors.rst:41
msgid ""
"For the latter, this is where :func:`~flask.Flask.url_defaults` "
"functions come in.  They can automatically inject values into a call to :"
"func:`~flask.url_for`.  The code below checks if the language code is "
"not yet in the dictionary of URL values and if the endpoint wants a "
"value named ``'lang_code'``::"
msgstr ""
"برای دومی، این جایی است که تابع :func:`~flask.Flask.url_defaults` وارد "
"می شود. آن می تواند به طور خودکار مقادیر را به فراخوانی و به :func:"
"`~flask.url_for` تزریق کند. کد زیر بررسی می‌کند که آیا کد زبان هنوز در "
"فرهنگ لغت مقادیر URL موجود نیست یا نه و آیا نقطه پایانی مقداری به نام "
"``'lang_code'`` را می‌خواهد::"

#: ../../patterns/urlprocessors.rst:54
msgid ""
"The method :meth:`~werkzeug.routing.Map.is_endpoint_expecting` of the "
"URL map can be used to figure out if it would make sense to provide a "
"language code for the given endpoint."
msgstr ""
"روش :meth:`~werkzeug.routing.Map.is_endpoint_expecting` نقشه URL را می "
"توان برای فهمیدن اینکه آیا ارائه یک کد زبان برای نقطه پایانی داده شده "
"منطقی است یا خیر استفاده می شود."

#: ../../patterns/urlprocessors.rst:58
msgid ""
"The reverse of that function are :meth:`~flask.Flask."
"url_value_preprocessor`\\s.  They are executed right after the request "
"was matched and can execute code based on the URL values.  The idea is "
"that they pull information out of the values dictionary and put it "
"somewhere else::"
msgstr ""
"عکس آن تابع عبارتند از :meth:`~flask.Flask.url_value_preprocessor`\\s . "
"آنها بلافاصله پس از مطابقت درخواست اجرا می شوند و می توانند کد را بر "
"اساس مقادیر URL اجرا کنند. ایده این است که آنها اطلاعات را از فرهنگ لغت "
"مقادیر بیرون می آورند و در جای دیگری قرار می دهند:"

#: ../../patterns/urlprocessors.rst:68
msgid ""
"That way you no longer have to do the `lang_code` assignment to :data:"
"`~flask.g` in every function.  You can further improve that by writing "
"your own decorator that prefixes URLs with the language code, but the "
"more beautiful solution is using a blueprint.  Once the ``'lang_code'`` "
"is popped from the values dictionary and it will no longer be forwarded "
"to the view function reducing the code to this::"
msgstr ""
"به این ترتیب دیگر لازم نیست در هر تابعی، `lang_code` را به :data:`~flask."
"g` اختصاص دهید. شما می توانید با نوشتن دکوراتور خود که URL ها را با کد "
"زبان پیشوند می کند، آن را بیشتر بهبود بخشید، اما راه حل زیباتر استفاده "
"از طرح اولیه است. هنگامی که  ``'lang_code'`` از فرهنگ لغت مقادیر ظاهر شد "
"و دیگر به تابع view ارسال نمی شود و کد را به این کاهش می دهد::"

#: ../../patterns/urlprocessors.rst:99
msgid "Internationalized Blueprint URLs"
msgstr "طرح URL های بین‌المللی شده"

#: ../../patterns/urlprocessors.rst:101
msgid ""
"Because blueprints can automatically prefix all URLs with a common "
"string it's easy to automatically do that for every function.  "
"Furthermore blueprints can have per-blueprint URL processors which "
"removes a whole lot of logic from the :meth:`~flask.Flask.url_defaults` "
"function because it no longer has to check if the URL is really "
"interested in a ``'lang_code'`` parameter::"
msgstr ""
"از آنجایی که طرح‌های اولیه می‌توانند به‌طور خودکار همه URL‌ها را با یک رشته "
"مشترک پیشوند کنند، انجام آن به‌طور خودکار برای هر تابع آسان است. علاوه بر "
"این، نقشه‌ها می‌توانند پردازشگرهای URL هر طرح را داشته باشند که منطق زیادی "
"را از تابع :meth:`~flask.Flask.url_defaults حذف می‌کند، زیرا دیگر لازم "
"نیست بررسی کند که آیا URL واقعاً به یک پارامتر ``\"lang_code\"`` علاقه "
"دارد یا خیر::"
